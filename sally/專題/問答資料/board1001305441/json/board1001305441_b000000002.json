{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:51:27",
        "@type": "post",
        "@filename": "b000000002.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001305441",
        "node": "000000002",
        "site": "1000110001",
        "pt": "2023-12-13 16:11:51",
        "poster": "11020126",
        "realname": "鄭祐昀",
        "email": "carry0987@gmail.com",
        "homepage": null,
        "subject": "221. 舉例解說中序走訪二元搜尋樹是否穩定排序。",
        "content": "<p>在中序走訪二元搜尋樹的過程中，訪問和輸出節點的順序會是一個遞增或遞減序列，因為BST的特性就是左子樹所有節點的值都小於該節點的值，而右子樹所有節點的值都大於該節點的值。</p>\r\n\r\n<p>這種走訪本質上是穩定的排序，因為它不會改變具有相同值節點的相對順序。但二元搜索樹本身在插入具有相同值的節點時可能不是穩定的，這取決於具體的插入策略。如果BST的實現允許重複值並且在保持這些值的插入順序上是一致的，那麼中序走訪就會是穩定的。</p>\r\n\r\n<p>舉個例子：</p>\r\n\r\n<p>假設我們按照下列順序向BST插入一系列值：5, 3, 7, 3, 8 (這裏有兩個3)。</p>\r\n\r\n<p>如果在我們的BST實現中，對於相同的值，新插入的節點總是作為重複節點的右子節點，我們的樹可能長這樣：</p>\r\n\r\n<blockquote>\r\n<p><br />\r\n&nbsp; &nbsp; 5<br />\r\n&nbsp; &nbsp;/ \\<br />\r\n&nbsp; 3 &nbsp; 7<br />\r\n&nbsp; &nbsp;\\ &nbsp; \\<br />\r\n&nbsp; &nbsp; 3 &nbsp; 8</p>\r\n</blockquote>\r\n\r\n<p>當進行中序走訪時，節點的訪問順序是：3, 3, 5, 7, 8。第一個插入的3在遍歷過程中會首先被訪問，接著是第二個插入的3，保存了其原始的插入順序，因此在這個情況下，中序走訪是穩定的。</p>\r\n\r\n<p>但是，如果BST實現中沒有針對相同節點值進行特定的操作，而是將新的節點隨意插入到左子樹或右子樹，那麼原始插入順序就可能不會得到保留，進而在中序走訪時不能保證是穩定的。</p>\r\n\r\n<p>所以，中序走訪二元搜尋樹在遵循特定的插入策略時是能夠保證穩定排序的，但這要看樹的插入和構建方式是否保持相同值節點的相對順序不變。</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "8",
        "lang": "1"
    }
}
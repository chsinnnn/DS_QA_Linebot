<?xml version="1.0"?>
<data version="3.0" time="2024-07-19 08:51:27" type="post" filename="b000000001.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001305441</board_id>
  <node>000000001</node>
  <site>1000110001</site>
  <pt>2023-12-13 08:34:52</pt>
  <poster>11127229</poster>
  <realname>&#x5ED6;&#x7FCA;&#x5D34;  </realname>
  <email>willy.liao921118@gmail.com</email>
  <homepage> </homepage>
  <subject>222. &#x64B0;&#x5BEB;&#x7A0B;&#x5F0F;&#x78BC;&#x6307;&#x51FA;&#x5982;&#x4F55;&#x70BA;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x65B0;&#x589E;&#x7BC0;&#x9EDE;&#x3002;</subject>
  <content>&lt;p&gt;# include &amp;lt;stdio.h&amp;gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;struct Node {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; int number ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Node * left ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Node * right ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;typedef Node * NodePtr ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Add( NodePtr &amp;amp; head, int num ) { &amp;nbsp;// insert new node&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; if ( head == NULL ) {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head = new Node ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head -&amp;gt;&amp;nbsp;left = NULL&amp;nbsp;;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head -&amp;gt; right = NULL ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head -&amp;gt; number = num ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; else if ( num &amp;lt; head -&amp;gt;&amp;nbsp;number ) {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Add( head -&amp;gt; left, num ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; else if ( num &amp;gt;= head -&amp;gt; number ) {&amp;nbsp;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Add( head -&amp;gt; right, num ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Inorder( NodePtr head ) { &amp;nbsp;// print inorder of tree&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; if ( head == NULL ) {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Inorder( head -&amp;gt; left ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; printf( &amp;quot;%d &amp;quot;, head -&amp;gt; number ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Inorder( head -&amp;gt; right ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int main( ) {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; int num = 0, order = 0 ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; NodePtr head = NULL ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; do {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;******************\n&amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;Order 0: quit\n&amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;Order 1: insert\n&amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;******************\n&amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;Input an order: &amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scanf( &amp;quot;%d&amp;quot;, &amp;amp;order ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ( order == 0 ) break ; &amp;nbsp;// end&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if ( order == 1 ) { &amp;nbsp;// insert&amp;nbsp;node&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;Input a number: &amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scanf( &amp;quot;%d&amp;quot;, &amp;amp;num ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Add( head, num ) ; &amp;nbsp;// insert&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;Inorder: &amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Inorder( head ) ; &amp;nbsp;// check the tree&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;Not the order!&amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf( &amp;quot;\n\n&amp;quot; ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; } while( order != 0 ) ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return 0 ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;</content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>22</hit>
  <lang>1</lang>
</data>

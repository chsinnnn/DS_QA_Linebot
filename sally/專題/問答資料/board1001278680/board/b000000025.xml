<?xml version="1.0"?>
<data version="3.0" time="2024-07-20 09:55:07" type="post" filename="b000000025.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001278680</board_id>
  <node>000000025</node>
  <site>1000110001</site>
  <pt>2023-07-15 21:45:57</pt>
  <poster>06005836</poster>
  <realname>&#x9673;&#x4E88;&#x7487;  </realname>
  <email>jason40125520@gmail.com</email>
  <homepage>  </homepage>
  <subject>&#x6436;&#x7B54;123 </subject>
  <content>&lt;p&gt;&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x5BEB;&lt;/span&gt;C++&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x7A0B;&#x5F0F;&#x78BC;&#x8AAA;&#x660E;&#x5982;&#x4F55;&#x8907;&#x88FD;&#x4E00;&#x6574;&#x500B;&#x93C8;&#x7D50;&#x4E32;&#x5217;&lt;/span&gt;linked list&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x5230;&#x53E6;&#x4E00;&#x500B;&#x8B8A;&#x6578;&#x3002;&lt;/span&gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p style="margin-left:28.3pt; text-align:justify"&gt;&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x4E32;&#x5217;&#x662F;&#x4E00;&#x500B;&lt;/span&gt; header &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#xFF0C;&#x5F8C;&#x9762;&#x7684;&lt;/span&gt; linked &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x4E00;&#x500B;&#x500B;&#x63A5;&#x5F8C;&#x9762;&#xFF0C;&#x5168;&#x90E8;&#x90FD;&#x662F;&#x6307;&#x6A19;&#xFF0C;&#x6240;&#x4EE5;&#x4E26;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x628A;&lt;/span&gt; header &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x7B49;&#x65BC;&#x5230;&#x53E6;&#x4E00;&#x500B;&lt;/span&gt; header &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#xFF0C;&#x800C;&#x662F;&#x8981;&#x628A;&#x6240;&#x6709;&lt;/span&gt; linked &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x5168;&#x90E8;&lt;/span&gt; new &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x4E00;&#x500B;&#x65B0;&#x7684;&#xFF0C;&#x4E26;&#x52A0;&#x5230;&#x76EE;&#x6A19;&#x7684;&#x4E32;&#x93C8;&#x4E2D;&#x3002;&lt;/span&gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p style="margin-left:28.3pt"&gt;&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x9019;&#x662F;&#x5728;&#x5BEB;&#x56DB;&#x5247;&#x904B;&#x7B97;&#x6642;&#x7528;&#x7684;&lt;/span&gt;stack &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#xFF0C;&#x9019;&#x88E1;&#x6539;&#x6210;&lt;/span&gt; queue &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x65B9;&#x5F0F;&lt;/span&gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p style="margin-left:28.3pt"&gt;Copy &lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x7684;&#x90E8;&#x4EFD;&#x7A0B;&#x5F0F;&#x78BC;&lt;/span&gt;(&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#x5B8C;&#x6574;&#x7A0B;&#x5F0F;&#x78BC;&#x5728;&#x6700;&#x5F8C;&lt;/span&gt;)&lt;span style="font-family:&#x65B0;&#x7D30;&#x660E;&#x9AD4;,serif"&gt;&#xFF1A;&lt;/span&gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// push&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Push( const Node &amp;amp; node )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Link *p ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x6C92;&#x6709;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if( _header == NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _header = new Link( node , NULL );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x8B80;&#x5230;&#x6700;&#x5F8C;&#x4E00;&#x500B;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p = _header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while( p-&amp;gt;Next() != NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p = p-&amp;gt;Next();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x65B0;&#x5EFA;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p-&amp;gt;setNext( new Link( node , NULL ));&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x52A0;&#x5165;&#x5168;&#x90E8;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void AddAll( const expQueue &amp;amp;src )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x53D6;&#x4F86;&#x6E90;&#x7684;&#x6839;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const Link *link = src._header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x4E00;&#x500B;&#x4E00;&#x500B;&#x6293;&#x51FA;&#x4F86;&#xFF0C;&#x4E26;push &#x5230;&#x81EA;&#x5DF1;&#x88E1;&#x9762;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while( link != NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x52A0;&#x5230;&#x4E32;&#x5217;&#x4E2D;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this-&amp;gt;Push( *link );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x63DB;&#x5230;&#x4E0B;&#x4E00;&#x500B; node&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; link = link-&amp;gt;Next();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// copy&#x6642;&#xFF0C;&#x5148;&#x628A;&#x81EA;&#x5DF1;&#x7684;&#x79FB;&#x6389;&#xFF0C;&#x518D;&#x52A0;&#x5165;&#x5168;&#x90E8;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Copy( const expQueue &amp;amp;src )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RemoveAll();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AddAll( src );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x7528;&#x4E00;&#x500B; class operator&#x904B;&#x7B97;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void operator = ( const expQueue &amp;amp; src )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this-&amp;gt;Copy( src );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;#include &amp;lt;iostream&amp;gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;using namespace std;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// ----------------------------------------------------------------&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// Node &#x7BC0;&#x9EDE;&#x8CC7;&#x6599;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;class Node&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;private :&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;string _string ; // &#x5B57;&#x4E32;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;char _op ; // &#x904B;&#x7B97;&#x5B50;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int _value ; // &#x503C;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;public:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5EFA;&#x69CB;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Node( const std::string&amp;amp; string , char op , int value )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _string = string;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _op = op ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _value = value ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x53D6; op&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;char OP()const&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return _op ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x53D6; &#x503C;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int Value() const&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return _value ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5370;&#x51FA;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Print() const&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cout &amp;lt;&amp;lt; _string ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// ----------------------------------------------------------------&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// Link &#x4E32;&#x5217;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;class Link&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;private :&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Node _node ; // &#x5BE6;&#x9AD4;&#x8CC7;&#x6599;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Link *_next ; // &#x4E0B;&#x4E00;&#x500B;&#x7684;&#x4E32;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;public :&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5EFA;&#x69CB;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Link( const Node&amp;amp; node , Link * next )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : _node(node), _next(next)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x53D6;&#x5F97;&#x7BC0;&#x9EDE;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;operator Node () const { return _node; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x53D6;&#x4E0B;&#x4E00;&#x500B;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Link * Next()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return _next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;const Link * Next()const&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return _next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5370;&#x51FA;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Print() const&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _node.Print();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x8A2D;&#x5B9A;&#x4E0B;&#x4E00;&#x500B;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void setNext( Link * pLink )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _next = pLink;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// ----------------------------------------------------------------&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// stack&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;class expQueue&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;private :&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x8CC7;&#x6599;&#x4E32;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Link *_header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;public :&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5EFA;&#x69CB;&#x5B50;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;expQueue()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _header = NULL ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x89E3;&#x69CB;&#x5B50;&#xFF0C;&#x79FB;&#x6389;&#x5168;&#x90E8;&#x5373;&#x53EF;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;~expQueue()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RemoveAll();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x79FB;&#x9664;&#x5168;&#x90E8;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void RemoveAll()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Link *link = _header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Link *next ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while( link != NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; next = link-&amp;gt;Next();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; delete link ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; link = next ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _header = NULL ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x662F;&#x5426;&#x662F;&#x7A7A;&#x7684;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;bool isEmpty() const{ return _header == NULL ; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// push&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Push( const Node &amp;amp; node )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Link *p ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x6C92;&#x6709;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if( _header == NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _header = new Link( node , NULL );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x8B80;&#x5230;&#x6700;&#x5F8C;&#x4E00;&#x500B;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p = _header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while( p-&amp;gt;Next() != NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p = p-&amp;gt;Next();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x65B0;&#x5EFA;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p-&amp;gt;setNext( new Link( node , NULL ));&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// pop&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Node Pop()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Node ret = *_header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Link *nowLink = _header-&amp;gt;Next() ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; delete _header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _header = nowLink ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ret ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x67E5;&#x770B;&#x76EE;&#x524D;&#x7684;&#x8CC7;&#x6599;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Node Peek()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return *_header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// push &#x4E00;&#x500B;&#x6578;&#x503C;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void PushValue( int value )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; char ch[1024] ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprintf( ch , &amp;quot;%d&amp;quot;, value );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Node node( ch , 0 , value );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Push( node );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// push &#x4E00;&#x500B; op&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void PushOP( char op )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; char ch[4] = { op , 0 } ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Node node( ch , op , 0 );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Push( node );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// pop &#x4E00;&#x500B; op&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;char PopOP()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Node ret = Pop();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ret.OP();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5370; stack &#x4E32;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Print() const&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int i = 0 ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Link *node = _header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// loop &#x5230;&#x6C92;&#x6709;&#x7BC0;&#x9EDE;&#x70BA;&#x6B62;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while( node != 0 )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if( i &amp;gt; 0 )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot; ,&amp;quot; ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; node-&amp;gt;Print();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ++i ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; node = node-&amp;gt;Next();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cout &amp;lt;&amp;lt; endl ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x52A0;&#x5165;&#x5168;&#x90E8;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void AddAll( const expQueue &amp;amp;src )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x53D6;&#x4F86;&#x6E90;&#x7684;&#x6839;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const Link *link = src._header ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x4E00;&#x500B;&#x4E00;&#x500B;&#x6293;&#x51FA;&#x4F86;&#xFF0C;&#x4E26;push &#x5230;&#x81EA;&#x5DF1;&#x88E1;&#x9762;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while( link != NULL )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this-&amp;gt;Push( *link );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; link = link-&amp;gt;Next();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// copy&#x6642;&#xFF0C;&#x5148;&#x628A;&#x81EA;&#x5DF1;&#x7684;&#x79FB;&#x6389;&#xFF0C;&#x518D;&#x52A0;&#x5165;&#x5168;&#x90E8;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void Copy( const expQueue &amp;amp;src )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RemoveAll();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AddAll( src );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x7528;&#x4E00;&#x500B; class operator&#x904B;&#x7B97;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void operator = ( const expQueue &amp;amp; src )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this-&amp;gt;Copy( src );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int main()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int i ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;expQueue a , b ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x6E2C;&#x8A66;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x96A8;&#x6A5F;&#x52A0;&#x5165; 10 &#x500B;&#x6578;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;for( i = 0 ; i &amp;lt; 10 ; ++i )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; a.PushValue( rand()%1000);&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;cout &amp;lt;&amp;lt; &amp;quot;a array value: &amp;quot; ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;a.Print();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;cout &amp;lt;&amp;lt; endl ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;//&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;cout &amp;lt;&amp;lt; &amp;quot;copy to b array&amp;quot; &amp;lt;&amp;lt; endl ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;b = a ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x4E5F;&#x53EF;&#x4EE5;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// b.Copy( a );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;cout &amp;lt;&amp;lt; &amp;quot;b array value: &amp;quot; ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;b.Print();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;cout &amp;lt;&amp;lt; endl ;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;return 0;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt; </content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>12</hit>
  <lang>1</lang>
</data>

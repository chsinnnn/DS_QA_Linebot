{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:07",
        "@type": "post",
        "@filename": "b000000025.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278680",
        "node": "000000025",
        "site": "1000110001",
        "pt": "2023-07-15 21:45:57",
        "poster": "06005836",
        "realname": "陳予璇",
        "email": "jason40125520@gmail.com",
        "homepage": null,
        "subject": "搶答123",
        "content": "<p><span style=\"font-family:新細明體,serif\">寫</span>C++<span style=\"font-family:新細明體,serif\">程式碼說明如何複製一整個鏈結串列</span>linked list<span style=\"font-family:新細明體,serif\">到另一個變數。</span></p>\r\n\r\n<p style=\"margin-left:28.3pt; text-align:justify\"><span style=\"font-family:新細明體,serif\">串列是一個</span> header <span style=\"font-family:新細明體,serif\">，後面的</span> linked <span style=\"font-family:新細明體,serif\">一個個接後面，全部都是指標，所以並不能直接把</span> header <span style=\"font-family:新細明體,serif\">等於到另一個</span> header <span style=\"font-family:新細明體,serif\">，而是要把所有</span> linked <span style=\"font-family:新細明體,serif\">全部</span> new <span style=\"font-family:新細明體,serif\">一個新的，並加到目標的串鏈中。</span></p>\r\n\r\n<p style=\"margin-left:28.3pt\"><span style=\"font-family:新細明體,serif\">這是在寫四則運算時用的</span>stack <span style=\"font-family:新細明體,serif\">，這裡改成</span> queue <span style=\"font-family:新細明體,serif\">方式</span></p>\r\n\r\n<p style=\"margin-left:28.3pt\">Copy <span style=\"font-family:新細明體,serif\">的部份程式碼</span>(<span style=\"font-family:新細明體,serif\">完整程式碼在最後</span>)<span style=\"font-family:新細明體,serif\">：</span></p>\r\n\r\n<p>// push</p>\r\n\r\n<p>void Push( const Node &amp; node )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Link *p ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 沒有</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( _header == NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _header = new Link( node , NULL );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 讀到最後一個</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = _header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( p-&gt;Next() != NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = p-&gt;Next();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 新建</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;setNext( new Link( node , NULL ));</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 加入全部</p>\r\n\r\n<p>void AddAll( const expQueue &amp;src )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 取來源的根</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const Link *link = src._header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 一個一個抓出來，並push 到自己裡面</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( link != NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 加到串列中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this-&gt;Push( *link );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 換到下一個 node</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; link = link-&gt;Next();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// copy時，先把自己的移掉，再加入全部</p>\r\n\r\n<p>void Copy( const expQueue &amp;src )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RemoveAll();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddAll( src );</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 用一個 class operator運算</p>\r\n\r\n<p>void operator = ( const expQueue &amp; src )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this-&gt;Copy( src );</p>\r\n\r\n<p>}</p>\r\n\r\n<p>#include &lt;iostream&gt;</p>\r\n\r\n<p>using namespace std;</p>\r\n\r\n<p>// ----------------------------------------------------------------</p>\r\n\r\n<p>// Node 節點資料</p>\r\n\r\n<p>class Node</p>\r\n\r\n<p>{</p>\r\n\r\n<p>private :</p>\r\n\r\n<p>string _string ; // 字串</p>\r\n\r\n<p>char _op ; // 運算子</p>\r\n\r\n<p>int _value ; // 值</p>\r\n\r\n<p>public:</p>\r\n\r\n<p>// 建構</p>\r\n\r\n<p>Node( const std::string&amp; string , char op , int value )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _string = string;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _op = op ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _value = value ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 取 op</p>\r\n\r\n<p>char OP()const</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _op ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 取 值</p>\r\n\r\n<p>int Value() const</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _value ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 印出</p>\r\n\r\n<p>void Print() const</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; _string ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>};</p>\r\n\r\n<p>// ----------------------------------------------------------------</p>\r\n\r\n<p>// Link 串列</p>\r\n\r\n<p>class Link</p>\r\n\r\n<p>{</p>\r\n\r\n<p>private :</p>\r\n\r\n<p>Node _node ; // 實體資料</p>\r\n\r\n<p>Link *_next ; // 下一個的串</p>\r\n\r\n<p>public :</p>\r\n\r\n<p>// 建構</p>\r\n\r\n<p>Link( const Node&amp; node , Link * next )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : _node(node), _next(next)</p>\r\n\r\n<p>{</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 取得節點</p>\r\n\r\n<p>operator Node () const { return _node; }</p>\r\n\r\n<p>// 取下一個</p>\r\n\r\n<p>Link * Next()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _next;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>const Link * Next()const</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _next;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 印出</p>\r\n\r\n<p>void Print() const</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _node.Print();</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 設定下一個</p>\r\n\r\n<p>void setNext( Link * pLink )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _next = pLink;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>};</p>\r\n\r\n<p>// ----------------------------------------------------------------</p>\r\n\r\n<p>// stack</p>\r\n\r\n<p>class expQueue</p>\r\n\r\n<p>{</p>\r\n\r\n<p>private :</p>\r\n\r\n<p>// 資料串</p>\r\n\r\n<p>Link *_header ;</p>\r\n\r\n<p>public :</p>\r\n\r\n<p>// 建構子</p>\r\n\r\n<p>expQueue()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _header = NULL ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 解構子，移掉全部即可</p>\r\n\r\n<p>~expQueue()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RemoveAll();</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 移除全部</p>\r\n\r\n<p>void RemoveAll()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Link *link = _header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Link *next ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( link != NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; next = link-&gt;Next();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete link ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; link = next ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _header = NULL ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 是否是空的</p>\r\n\r\n<p>bool isEmpty() const{ return _header == NULL ; }</p>\r\n\r\n<p>// push</p>\r\n\r\n<p>void Push( const Node &amp; node )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Link *p ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 沒有</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( _header == NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _header = new Link( node , NULL );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 讀到最後一個</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = _header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( p-&gt;Next() != NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = p-&gt;Next();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 新建</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;setNext( new Link( node , NULL ));</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// pop</p>\r\n\r\n<p>Node Pop()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node ret = *_header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Link *nowLink = _header-&gt;Next() ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete _header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _header = nowLink ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ret ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 查看目前的資料</p>\r\n\r\n<p>Node Peek()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *_header ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// push 一個數值</p>\r\n\r\n<p>void PushValue( int value )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char ch[1024] ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprintf( ch , &quot;%d&quot;, value );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node node( ch , 0 , value );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Push( node );</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// push 一個 op</p>\r\n\r\n<p>void PushOP( char op )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char ch[4] = { op , 0 } ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node node( ch , op , 0 );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Push( node );</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// pop 一個 op</p>\r\n\r\n<p>char PopOP()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node ret = Pop();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ret.OP();</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 印 stack 串</p>\r\n\r\n<p>void Print() const</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0 ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Link *node = _header ;</p>\r\n\r\n<p>// loop 到沒有節點為止</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( node != 0 )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( i &gt; 0 )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot; ,&quot; ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node-&gt;Print();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++i ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node = node-&gt;Next();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; endl ;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 加入全部</p>\r\n\r\n<p>void AddAll( const expQueue &amp;src )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 取來源的根</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const Link *link = src._header ;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 一個一個抓出來，並push 到自己裡面</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( link != NULL )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this-&gt;Push( *link );</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; link = link-&gt;Next();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// copy時，先把自己的移掉，再加入全部</p>\r\n\r\n<p>void Copy( const expQueue &amp;src )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RemoveAll();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddAll( src );</p>\r\n\r\n<p>}</p>\r\n\r\n<p>// 用一個 class operator運算</p>\r\n\r\n<p>void operator = ( const expQueue &amp; src )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this-&gt;Copy( src );</p>\r\n\r\n<p>}</p>\r\n\r\n<p>};</p>\r\n\r\n<p>int main()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>int i ;</p>\r\n\r\n<p>expQueue a , b ;</p>\r\n\r\n<p>// 測試</p>\r\n\r\n<p>// 隨機加入 10 個數</p>\r\n\r\n<p>for( i = 0 ; i &lt; 10 ; ++i )</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.PushValue( rand()%1000);</p>\r\n\r\n<p>cout &lt;&lt; &quot;a array value: &quot; ;</p>\r\n\r\n<p>a.Print();</p>\r\n\r\n<p>cout &lt;&lt; endl ;</p>\r\n\r\n<p>//</p>\r\n\r\n<p>cout &lt;&lt; &quot;copy to b array&quot; &lt;&lt; endl ;</p>\r\n\r\n<p>b = a ;</p>\r\n\r\n<p>// 也可以</p>\r\n\r\n<p>// b.Copy( a );</p>\r\n\r\n<p>cout &lt;&lt; &quot;b array value: &quot; ;</p>\r\n\r\n<p>b.Print();</p>\r\n\r\n<p>cout &lt;&lt; endl ;</p>\r\n\r\n<p>return 0;</p>\r\n\r\n<p>}</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "12",
        "lang": "1"
    }
}
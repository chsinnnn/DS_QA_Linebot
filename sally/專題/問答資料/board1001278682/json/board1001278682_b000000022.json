{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:20",
        "@type": "post",
        "@filename": "b000000022.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278682",
        "node": "000000022",
        "site": "1000110001",
        "pt": "2023-07-21 23:28:08",
        "poster": "10827128",
        "realname": "林鑫宏",
        "email": "shawn140802@gmail.com",
        "homepage": null,
        "subject": "搶答 203",
        "content": "<p>&nbsp;舉例說明雙重佇列如何模擬，須指出選擇佇列的策略。</p>\r\n\r\n<p>我想到的是一個櫃台本來2個店員同時結帳，並各有一排隊伍，但是店員2女朋友突然打來，只能店員1獨挑大樑，因為叫第二排重新排一次不太好，只能同時結這兩排，而要幫這兩排結帳又不會被客訴就必須要盡量公平且有效率，我有下列方案，更多策略可以依當前需求再制訂:</p>\r\n\r\n<ul>\r\n\t<li>可以兩排隊伍輪流，如果買的東西跟每排人數差不多，效率是可以的</li>\r\n\t<li>結完一個客人帳的當下，隊伍人數多的那排可以結，可以平均的減少2排人數(可能一直有新客人排到同一排時)</li>\r\n\t<li>結完一個客人帳的當下，隊伍最前的買得多(或少)的那排可以結，若挑最多先，不用佔他們太多力氣，反之可以最快減少人數(看重資源或效率)</li>\r\n\t<li>看這2排誰在結完一個客人帳的當下的整體總耗時高就先</li>\r\n</ul>\r\n\r\n<p>套用到程式上就一樣是看head(第一位)或整體的內容判斷去走策略</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "9",
        "lang": "1"
    }
}
[
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 我所使用的C++讀寫檔指令是在fstream library中的 ifstream 及 ofstream ，前者用作讀入，後者用作輸出。\n在程式開始之前，我們先在要讀入的檔案中(input.txt)輸入 Hello world ,  123 兩行文字\n\n\n接著我們對文件中的資訊讀入並印出，結果如下圖所示\n\n\n在寫檔的部分，我們需要輸入想要寫入的文件(output.txt)\n註：此文件會以新增的方式出現，若是輸入已經存在的檔名會被直接覆蓋\n最後輸入我們想要寫入文件的訊息即可，結果如下。\n\n\n\n此程式的程式碼如下：",
        "output": "ifstream 及 ofstream是class，讀寫檔案的指令是什麼？"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 以M = 311 為例 結果如下\n\n\n\n程式碼:\n\n#include &lt;iostream&gt;\nusing namespace std;\nint num[2] ;\n// 閱讀題目以及撰寫程式過程中無參考資料\nvoid sum( int  M, int base = 100 ,int index = 0 )\n{\n  if ( index == 2 &amp;&amp; M - num[0] - num[1] &gt;= 100 ) // base case\n  {\n    cout &lt;&lt; num[0] &lt;&lt;     &lt;&lt; num[1] &lt;&lt;     &lt;&lt; M - num[0] - num[1] &lt;&lt; endl ;\n  }\n  else if ( index == 0 &amp;&amp; M - base &gt;= 200 ) // 減去num[0]後至少要剩200(符合題意 百位數必須非零 )\n  {\n    sum( M, base + 1, 0 ) ; // 改變base使目前位置的數字累加\n    num[0] = base ;\n    sum( M, base + 1, 1 ) ; // 符合題意 3個數字不同  目前位置:0 準備遞迴位置:1\n  }\n  else if ( index == 1 &amp;&amp; M - base &gt;= 100 ) // 減去num[0]與num[1]後至少要剩100(符合題意 百位數必須非零 )\n  {\n    sum( M, base + 1, 1 ) ; // 改變base使目前位置的數字累加\n    num[1] = base ;\n    sum( M, base + 1, 2 ) ; // 符合題意 3個數字不同  目前位置:1 準備遞迴位置:2\n  }\n}\nint main() {\n  sum ( 311 ) ;\n}",
        "output": "貼文須提供可剪貼重現的原始碼，並附上必要的註解，參考引用更要附上網址，未修正將不列入計分。"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "畫的很清楚 讚 很清楚( ͡o ͜ʖ ͡o) Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 2 4 6 * + 7 5 - *\n\n1: 將2放進堆疊裡         stack目前有2\n\n2: 將4放進堆疊裡         stack目前有2 4\n\n3: 將6放進堆疊裡         stack目前有2 4 6\n\n4: 碰到* 將堆疊裡後加入兩個數字做運算並放進堆疊裡    stack目前有2 24\n\n5: 碰到+將堆疊裡後加入兩個數字做運算並放進堆疊裡    stack目前有26\n\n6: 將7放進堆疊裡         stack目前有26 7\n\n7: 將5放進堆疊裡         stack目前有26 7 5\n\n8: 碰到-將堆疊裡後加入兩個數字做運算並放進堆疊裡    stack目前有26 2\n\n9: 碰到*將堆疊裡後加入兩個數字做運算並放進堆疊裡    結果為52",
        "output": "條列式分析讓我更了解後序式了！ OK 步驟清晰容易理解 講得真清楚！"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "真讚 可，堆疊畫出來比較清楚頂端top的位置。 圖畫的真好 看得更清楚更好理解了"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 不是。\n\n以最後三位(-75)做檢查\n\nprefix:-75 ----&gt; infix:(7-5)\n\ninfix expression: 2*4+6*(7-5)\nPrefix expression: +*24*6-75\n\ninfix expression: (2*4+6)*(7-5)\nPrefix expression: *+*246-75\n\ninfix expression: 2*4+(6*(7-5))\nPrefix expression: +*24*6-75\n\n如果真的要改為正確的前序式，則必須把6跟*的位置調換\n\n因為已+*246來說 ---&gt; 2*4+6=14\n接續以下的算是 14*-75 ----&gt; -75 -&gt; (7-5)\n得出來的結果會變成14*(7-5) 即不符合前序式的定義。",
        "output": "好棒!!!講解得很清楚 很詳細!讚 厲害👍"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "運算子operator：+ - * /\n\n運算元 operand：數字 2 4 6\n\n本文似乎將二者的定義弄反了！"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "Good! 推推 簡單明瞭 推導的好清楚 好讚!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "OK 繪圖邏輯清晰 一看就能明白"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 不是。\n\n最簡單的前序式是一個運算子後面接兩個運算元 (e.g. *73, +92)\n\n當題目中的-75做完後*後面剩2一個數字，不符合前序式的規則。\n\n因此應該將第二個*與前面的6交換位置變成+*24*6-75 [中序式: 2*4+6*(7-5)]，\n\n或將它放到式子的最前面變成*+*246-75 [中序式: (2*4+6)*(7-5)]，才會是正確的前序式。",
        "output": "運算子operator：+ - * /\n\n運算元 operand：數字 2 4 6\n\n本文似乎將二者的定義弄反了！ 雖然有一些小錯誤 但還是講解的很棒喔! 講解的詳細清楚，很讚 寫得不錯還有把正確式子列出來"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: + * 2 4 6 * - 7 5不是前序式\n\n因為我們可以透過數學歸納法得知前序式加上任何字串就不會為前序式，在此例中可以透過\n\n&lt;prefix&gt; =  &lt;number&gt; | &lt;operator&gt;&lt;prefix&gt;&lt;prefix&gt;\n\n&lt;operator&gt; = + | - | * | /\n\n&lt;number&gt; = &lt;dight&gt; | &lt;number&gt;&lt;dight&gt;\n\n&lt;dight&gt; = 1 | 2 | ... | 9\n\n程式得出+ * 2 4 6為題目字串的最長前序式，因此在其後加上的* - 7 5此字串就會使得+ * 2 4 6 * - 7 5不會為前序式。",
        "output": "Excellent!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 運算的時候要從後序式的前方開始讀，如果讀到的是運算元就存入堆疊，如果遇到的是運算子就從堆疊取兩個運算元進行運算，然後再把運算的結果存回去堆疊，這樣把整個運算式讀完後，堆疊頂端的那個值就是我們要的答案。\n\n以下為計算後序式2 4 6 * + 7 5 - *過程\n\n讀到 2，存入堆疊，目前堆疊 2\n\n讀到 4，存入堆疊，目前堆疊 2, 4\n\n讀到 6，存入堆疊，目前堆疊 2, 4, 6\n\n讀到＊，取 4, 6 運算，4＊6＝24，將結果存回堆疊，目前堆疊 2, 24\n\n讀到＋，取 2, 24 運算，2+24=26，將結果存回堆疊，目前堆疊 26\n\n讀到 7，存入堆疊，目前堆疊 26, 7\n\n讀到 5，存入堆疊，目前堆疊 26, 7, 5\n\n讀到－，取 7, 5 運算，7－5＝2，將結果存回堆疊，目前堆疊 26, 2\n\n讀到＊，取 26, 2 運算，26＊2＝52，將結果存回堆疊，目前堆疊 52\n\n運算式讀取結束，堆疊頂端為52，後序式2 4 6 * + 7 5 - *運算結果為52",
        "output": "講得真清楚！ 講得真~~好 步驟清楚容易理解!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "簡單明瞭！步驟都很清楚，超棒😍 運算時連位置都標上了，能夠提醒看的人特別留意減法和除法的結果，非常仔細! 將步驟寫得很清楚"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 不是\n\n我們可以簡單運算後得知 先從右邊往左邊找連續兩個運算元和一個運算子\n\n得到- 7 5 \n\n - 7 5做運算後  7 - 5=2 原式變+ * 2 4 6 * 2 這裡就可以得知不是 因為當我們想要繼續做運算時 最右邊的2將無法找到另一個運算元與之配對形成前序式的表法 運算子 運算元 運算元 所以此式不是前序式",
        "output": "內容簡單且清楚! 邏輯清晰，講解的很淺顯易懂。 寫得很明白、淺顯易懂！讚👍🏻"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 補充說明 : Python 類別中的def __init__(self) 為類別宣告時會自動執行的函式，類似於constructor的作用；函數的第一個參數為實例對象本身，通常寫為self。\n\nPython v.s. C++ : \n\nPython中private的寫法為 雙底線命名  : __studentID\n\n由於Python沒有嚴謹定義private的機制，所以可以利用以下方法拿到private member : st._Student__studentID ( 宣告名稱+.+_+類別名稱+private member名稱 )",
        "output": "推推 潛顯易懂 清晰明瞭，超讚的 簡潔且補充說明與比較的部分也淺顯易懂。 Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 判斷是否為前序式，可以先將〈運算子〉*1〈運算元〉*2括號起來，然後括號內的東西就可以視為一個運算元。如果為前序式，最後只能剩下〈運算元〉*1。\n\n+*246*-75〈運算子〉*2〈運算元〉*3〈運算子〉*2〈運算元〉*2\n\n+(*24)6*(-75) 〈運算子〉*1〈運算元〉*2〈運算子〉*1〈運算元〉*1\n\n[+(*24)6]*(-75) 〈運算元〉*1〈運算子〉*1〈運算元〉*1\n\n因為最後沒辦法表示成〈運算元〉*1，所以不是前序式。",
        "output": "讚讚～講的很清楚 講的很清楚，容易理解！ Good idea!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 後序式求解方法：遇到運算元就堆疊，遇到運算子則將堆疊中的最上面兩數進行運算並刪除那兩數，將運算結果存於堆疊最上面一位，最後回傳堆疊結果即為答案。\n\n\n\t2&ndash;運算元，存入堆疊\n\t4&ndash;運算元，存入堆疊\n\t6&ndash;運算元，存入堆疊\n\t*&mdash;運算子，將堆疊中的最上面兩數（4、6）進行運算：4*6=24，刪除4、6，將24存入堆疊最上面一位\n\t+&mdash;運算子，將堆疊中的最上面兩數（2、24）進行運算：2+24=26，刪除2、24，將26存入堆疊最上面一位\n\t7&ndash;運算元，存入堆疊\n\t5&ndash;運算元，存入堆疊\n\t- &mdash;運算子，將堆疊中的最上面兩數（7、5）進行運算：7-5=2，刪除7、5，將2存入堆疊最上面一位\n\t*&mdash;運算子，將堆疊中最上面兩數（26、2）進行運算：26*2=52，刪除26、2；將52存入堆疊最上面一位\n\t52為答案",
        "output": "講得很清楚(๑&bull;̀ㅂ&bull;́)و✧ 講解清楚！"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 如題。\n到目前為止，共計55位同學問答已得分。",
        "output": ""
    }
]
<?xml version="1.0"?>
<data version="3.0" time="2024-07-19 08:53:54" type="post" filename="b000000006.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001296420</board_id>
  <node>000000006</node>
  <site>1000110001</site>
  <pt>2023-10-12 02:29:21</pt>
  <poster>11127149</poster>
  <realname>&#x674E;&#x5F8C;&#x9706;  </realname>
  <email>m3918513@gmail.com</email>
  <homepage> </homepage>
  <subject>119 </subject>
  <content>&lt;p&gt;119. &#x5BEB;C++&#x7A0B;&#x5F0F;&#x78BC;&#x8AAA;&#x660E;&#x522A;&#x9664;&#x93C8;&#x7D50;&#x4E32;&#x5217;linked list&#x7B2C;3&#x500B;&#x7BC0;&#x9EDE;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x7A0B;&#x5F0F;&#x78BC;:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// 11127149 &#x674E;&#x5F8C;&#x9706;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;#include &amp;lt;iostream&amp;gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;using namespace std;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;typedef int DataType;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;struct Node{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; DataType data;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Node *next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;class List&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; private:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node *head;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int size;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node *find( int index );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; public:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; List();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int getLength();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void insert( int index, DataType newData );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void remove( int index );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void printList();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Node *List::find( int index )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; if ( index &amp;lt; 1 || index &amp;gt; getLength() )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return NULL;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&lt;br /&gt;&#xD;
&amp;nbsp;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Node *cur = head;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; for ( int i = 1; i &amp;lt; index; i++ )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cur = cur-&amp;gt;next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return cur;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;List::List()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; head = NULL;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; size = 0;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int List::getLength()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return size;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void List::insert( int index, DataType newData )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; int listLength = getLength() + 1;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; if ( index &amp;lt; 1 || index &amp;gt; listLength )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;&amp;quot;Error: Out of Range.&amp;quot;;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; else&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; size = listLength;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node *newNode = new Node;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; newNode-&amp;gt;data = newData;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ( index == 1 )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; newNode-&amp;gt;next = head;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head = newNode;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node *pre = find( index - 1 );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; newNode-&amp;gt;next = pre-&amp;gt;next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pre-&amp;gt;next = newNode;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void List::remove( int index )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; if ( index &amp;lt; 1 || index &amp;gt; getLength() )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;&amp;quot;Error: Out of Range.&amp;quot;;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; else&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node *dl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ( index == 1 )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dl = head;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head = head-&amp;gt;next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node *pre = find( index - 1 );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dl = pre-&amp;gt;next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pre-&amp;gt;next = dl-&amp;gt;next;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dl-&amp;gt;next = NULL;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delete dl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dl = NULL;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; size--;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void List::printList()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; for ( Node *cur = head; cur != NULL; cur = cur-&amp;gt;next )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; cur-&amp;gt;data &amp;lt;&amp;lt; &amp;quot; &amp;quot;;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; endl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int main()&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;{&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; List listA;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; DataType inputData[5] = { 1, 2, 3, 4, 5 };&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; for ( int i = 0; i &amp;lt; 5; i++ )&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; listA.insert( i + 1, inputData[i] );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; listA.printList();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; listA.remove( 3 );&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; listA.printList();&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x8F38;&#x51FA;:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;1 2 3 4 5&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;1 2 4 5&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x8AAA;&#x660E;:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x5C07;&#x9663;&#x5217;inputData&#x7684;&#x8CC7;&#x6599;&#x900F;&#x904E;insert()&#x5132;&#x5B58;&#x65BC;&#x93C8;&#x7D50;&#x4E32;&#x5217;listA&#x5167;&#xFF0C;printList&#x6703;&#x8F38;&#x51FA;:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;1 2 3 4 5&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x900F;&#x904E;remove()&#x5C07;listA&#x7B2C;3&#x500B;&#x7BC0;&#x9EDE;&#x522A;&#x9664;:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;1.&#x78BA;&#x8A8D;&#x8981;&#x522A;&#x9664;&#x7684;&#x7BC0;&#x9EDE;&#x662F;&#x5426;&#x4E0D;&#x5B58;&#x5728;(false)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;2.&#x5EFA;&#x7ACB;&#x6307;&#x6A19;dl&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;3.&#x78BA;&#x8A8D;&#x8981;&#x522A;&#x9664;&#x7BC0;&#x9EDE;&#x662F;&#x5426;&#x70BA;&#x7B2C;1&#x500B;(false)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;4.&#x5EFA;&#x7ACB;&#x6307;&#x6A19;pre&#x6307;&#x5411;&#x8981;&#x522A;&#x9664;&#x7BC0;&#x9EDE;&#x524D;&#x4E00;&#x7BC0;&#x9EDE;(&#x7B2C;2&#x7BC0;&#x9EDE;)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;5.dl&#x6307;&#x5411;pre-&amp;gt;next&#x6307;&#x5411;&#x7BC0;&#x9EDE;(&#x7B2C;3&#x7BC0;&#x9EDE;)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;6.pre-&amp;gt;next&#x6307;&#x5411;dl-&amp;gt;next&#x6307;&#x5411;&#x7BC0;&#x9EDE;(&#x7B2C;4&#x7BC0;&#x9EDE;)(&#x7B2C;2&#x7BC0;&#x9EDE;&#x6307;&#x5411;&#x7B2C;4&#x7BC0;&#x9EDE;)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;7.dl-&amp;gt;next&#x6307;&#x5411;NULL(&#x65B7;&#x958B;&#x7B2C;3&#x7BC0;&#x9EDE;&#x548C;&#x7B2C;4&#x7BC0;&#x9EDE;)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;8.delete dl; dl = NULL(&#x522A;&#x9664;&#x7B2C;3&#x7BC0;&#x9EDE;),size--(&#x93C8;&#x7D50;&#x4E32;&#x5217;&#x9577;&#x5EA6;&#x6E1B;1)&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x522A;&#x9664;&#x5F8C;&#xFF0C;printList&#x6703;&#x8F38;&#x51FA;:&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;1 2 4 5&lt;/p&gt;</content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>40</hit>
  <lang>1</lang>
</data>

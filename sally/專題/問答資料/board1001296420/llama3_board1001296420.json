[
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 寫C++程式碼說明傳址呼叫call by address。\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n// 函數接受一個整數address，通過address修改變數的值\nvoid modifyValueByAddress(int&amp; ref) {\n    ref = ref * 2;\n}\n\nint main() {\n    int x = 5;\n\n    cout &lt;&lt;  在函數調用之前：x =   &lt;&lt; x &lt;&lt; endl;\n    modifyValueByAddress(x); // 傳遞變數 x 的address\n    cout &lt;&lt;  在函數調用之後：x =   &lt;&lt; x &lt;&lt; endl;\n\n    return 0;\n}\n \n\n當這段程式碼運行後會獲得以下輸出:\n\n在函數調用之前：x = 5\n在函數調用之後：x = 10\n\n可以發現x的值被成功改動了,原因是將整數 x 以call by address的方式傳遞給 modifyValueByAddress 函數，並通過ref 修改了 x 的值。事實上無論使用pointer或是call by address的方式，它們都能夠修改原始變數x的值，因為它們實際上是使用了x的地址或引用來進行操作。",
        "output": "ok void modifyValueByAddress(int&amp; ref) {\n\nThis is NOT call by address!!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 題目:\n\n117. 寫C++程式碼說明傳址呼叫call by address。\n\n程式碼:\n\n#include&lt;iostream&gt;\n\nusing namespace std;\n\nvoid callByAddress( int &amp;numB ) {\n\n  numB += 10;\n\n  return;\n\n}\n\nint main() {\n\n  int numA = 0;\n\n  cout &lt;&lt; numA &lt;&lt; endl;\n\n  callByAddress( numA );\n\n  cout &lt;&lt; numA &lt;&lt; endl;\n\n}\n\n說明:\n\n上圖的程式碼首先會印出一開始初始化的numA也就是0，接著利用call by address 傳入函式後用numB來接，再來將numB加上10後結束，回到main再次印出numA，此時會發現印出的並不是0而是10。\n\ncall by address是將傳入參數的所在位置傳入，因此在此程式碼中的numA以及numB其實是同一個資料，也就是說這兩個變數中的數值在記憶體上其實是同一個位置的數值，只是用不同名稱來稱呼而已。",
        "output": "ok void callByAddress( int &amp;numB ) {\n\nRead the previous post first; otherwise, you will get points deducted instead of points added!\n\nBesides, do NOT plagiarize!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 題目:\n\n118. 令ptrX指向鏈結串列的節點，比較ptrX = ptrX-&gt;next和ptrX-&gt;next = ptrX的差異。\n\n解說:\n\n假設一串結陣列為 ptrX -&gt; 1 -&gt; 2 -&gt; 3 -&gt; NULL\n\n首先 ptrX = ptrX -&gt; next 會將這個資料列變成\n\nptrX -&gt; 2 -&gt; 3 -&gt; NULL ( 若沒其他指標指向1，除了會找不到1外，也釋放不掉記憶體 )\n\n再來 若是 ptrX -&gt; next = ptrX 則會變成\n\nptrX -&gt; 1 - - |\n\n            ^      |\n\n             | - - |\n\n即為ptrX的next指回ptrX目前指著的地方( 後面的2、3會找不到 )",
        "output": "ok"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 舉例說明使用雙向鏈結串列doubly linked list的情境。\n\n\n1. 編輯器的復原/重做功能\n\n以文字編輯器為例，當使用者進行了修改，就將當前文本狀態存到doubly linked list尾端，當使用者執行復原指令就將指標往前一個，如果執行重做就往後一個\n\n2. 瀏覽器的上一頁、下一頁(歷史紀錄)功能\n\n每瀏覽一個網頁就把URL加到doubly linked list尾端，能更方便向前向後導航\n\n3. 更方便實作stack、hash table之類的資料結構\n\n4. Linux kernel的行程(process)管理\n\n在Linux kernel的原始碼可以找到大量(circular) doubly linked list，最著名的例子就是行程管理，可以高效率進行插入、刪除、搜尋、遍歷",
        "output": "OK Nice examples."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 116. 將後序式postfix轉前序式prefix，並詳述步驟。*\na b + c * d e + f * + w z + *\n\n1.從左至右逐個讀進後序式，根據運算子與運算員不同做相應的處理。\n\n2-1.若讀進的是運算元，則推進棧中並且以分隔符號例如；或$等字元代表接下來碰到運算子時的左右運算式。\n\n2-2.若讀進的是運算子，則逐個取出棧中的元素直到取空或是分隔符號已取出兩個，而後將當下讀到的運算子推進棧，並重新將剛才取出的左右運算式推進棧中，要留意的是移除其中的分隔符號。\n\n3.當讀到後序式最後一個字元時，最後一個字元放進前序式第一個位置。\n\n4.最後將棧中所有元素取出並清除其中分隔符號，並反向打印即得轉換後的前序式。\n\n以下為順序:\n\na                        \na;b                                 //中間以;作為分隔符\n+ab                               //讀到+時取出b並計算一個分隔符號，取出a讀到棧中為空，放進+並重新將左右式的ab放入\n+ab;c\n*+abc;\n*+abc;d\n*+abc;d;e\n*+abc;+de;\n*+abc;+de;f\n*+abc;*+def;\n+*+abc;*+def;\n+*+abc;*+def;w\n+*+abc;*+def;w;z\n+*+abc;*+def;+wz;\n*+*+abc;*+def;+wz;\nzw+fed+*cba+*+*      // 取出並整理\n*+*+abc*+def+wz     //反向打印",
        "output": "OK The algorithmic steps are NOT clearly described.\n\nWhat you need to explain first is the following step:\n\n+ab;c\n*+abc;"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 119. 寫C++程式碼說明刪除鏈結串列linked list第3個節點。\n\n程式碼:\n\n// 11127149 李後霆\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\ntypedef int DataType;\n\nstruct Node{\n\n    DataType data;\n\n    Node *next;\n\n};\n\nclass List\n\n{\n\n    private:\n\n        Node *head;\n\n        int size;\n\n        Node *find( int index );\n\n    public:\n\n        List();\n\n        int getLength();\n\n        void insert( int index, DataType newData );\n\n        void remove( int index );\n\n        void printList();\n\n};\n\nNode *List::find( int index )\n\n{\n\n    if ( index &lt; 1 || index &gt; getLength() )\n\n        return NULL;\n\n\n \n\n    Node *cur = head;\n\n    for ( int i = 1; i &lt; index; i++ )\n\n        cur = cur-&gt;next;\n\n    return cur;\n\n}\n\nList::List()\n\n{\n\n    head = NULL;\n\n    size = 0;\n\n}\n\nint List::getLength()\n\n{\n\n    return size;\n\n}\n\nvoid List::insert( int index, DataType newData )\n\n{\n\n    int listLength = getLength() + 1;\n\n    if ( index &lt; 1 || index &gt; listLength )\n\n        cout &lt;&lt; endl &lt;&lt; Error: Out of Range. ;\n\n    else\n\n    {\n\n        size = listLength;\n\n        Node *newNode = new Node;\n\n        newNode-&gt;data = newData;\n\n        if ( index == 1 )\n\n        {\n\n            newNode-&gt;next = head;\n\n            head = newNode;\n\n        }\n\n        else\n\n        {\n\n            Node *pre = find( index - 1 );\n\n            newNode-&gt;next = pre-&gt;next;\n\n            pre-&gt;next = newNode;\n\n        }\n\n    }\n\n}\n\nvoid List::remove( int index )\n\n{\n\n    if ( index &lt; 1 || index &gt; getLength() )\n\n        cout &lt;&lt; endl &lt;&lt; Error: Out of Range. ;\n\n    else\n\n    {\n\n        Node *dl;\n\n        if ( index == 1 )\n\n        {\n\n            dl = head;\n\n            head = head-&gt;next;\n\n        }\n\n        else\n\n        {\n\n            Node *pre = find( index - 1 );\n\n            dl = pre-&gt;next;\n\n            pre-&gt;next = dl-&gt;next;\n\n        }\n\n        dl-&gt;next = NULL;\n\n        delete dl;\n\n        dl = NULL;\n\n        size--;\n\n    }\n\n}\n\nvoid List::printList()\n\n{\n\n    for ( Node *cur = head; cur != NULL; cur = cur-&gt;next )\n\n        cout &lt;&lt; cur-&gt;data &lt;&lt;    ;\n\n    cout &lt;&lt; endl;\n\n}\n\nint main()\n\n{\n\n    List listA;\n\n    DataType inputData[5] = { 1, 2, 3, 4, 5 };\n\n    for ( int i = 0; i &lt; 5; i++ )\n\n        listA.insert( i + 1, inputData[i] );\n\n    listA.printList();\n\n    listA.remove( 3 );\n\n    listA.printList();\n\n}\n\n輸出:\n\n1 2 3 4 5\n\n1 2 4 5\n\n說明:\n\n將陣列inputData的資料透過insert()儲存於鏈結串列listA內，printList會輸出:\n\n1 2 3 4 5\n\n透過remove()將listA第3個節點刪除:\n\n1.確認要刪除的節點是否不存在(false)\n\n2.建立指標dl\n\n3.確認要刪除節點是否為第1個(false)\n\n4.建立指標pre指向要刪除節點前一節點(第2節點)\n\n5.dl指向pre-&gt;next指向節點(第3節點)\n\n6.pre-&gt;next指向dl-&gt;next指向節點(第4節點)(第2節點指向第4節點)\n\n7.dl-&gt;next指向NULL(斷開第3節點和第4節點)\n\n8.delete dl; dl = NULL(刪除第3節點),size--(鏈結串列長度減1)\n\n刪除後，printList會輸出:\n\n1 2 4 5",
        "output": "OK BUG:\n\nNode *pre = find( index - 1 );   // pre=NULL if there are only two nodes\n\n            dl = pre-&gt;next;  // pre-&gt;next?"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 令ptrX指向鏈結串列的節點，比較ptrX = ptrX-&gt;next和ptrX-&gt;next = ptrX的差異。\n\n「ptrX = ptrX-&gt;next」是將ptrX指向目前節點的下一個節點。\n\n「ptrX-&gt;next = ptrX」是將ptrX所指向的節點的下一個節點設為指向ptrX目前所指向的節點。這個操作可能導致循環，以及鏈結串列斷裂，造成記憶體的佔用與資料無法尋找的問題。",
        "output": "圖解十分清楚 Good illustration!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 令ptrX指向鏈結串列的節點，比較ptrX = ptrX-&gt;next和ptrX-&gt;next = ptrX的差異。\n\nptrX = ptrX -&gt; next : 代表ptr這個指標，從原位置移至ptr -&gt; next，簡單講就是移動ptr至鏈結串列的下一個節點。\nptrX-&gt;next = ptrX : 代表ptr這個指標的next指向回ptr本身，形成一個循環，也會使原資料的鏈結斷開，從而移失部分的鏈結串列。",
        "output": "late... previous post looks much better!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 119. 寫C++程式碼說明刪除鏈結串列linked list第3個節點。\n\n# include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n\n{\n\n    struct Node {\n\n        int item;\n\n        Node *next;\n\n    }; // 指標架構\n\n   \n\n    int count = 2 ;\n\n    Node *p, *cur, *post ;\n\n    p = new Node ; // 創建指標\n\n    p -&gt; item = 1 ;\n\n   \n\n    for( cur = p; count &lt; 6; count++){\n\n        cur -&gt; next = new Node ;\n\n        cur = cur -&gt; next ;\n\n        cur -&gt; item = count ;\n\n        cur -&gt; next = NULL;\n\n    } // 創建長度為5的指標\n\n   \n\n    count = 0 ;\n\n   \n\n    for( cur = p; count &lt; 1; count++)\n\n        cur = cur -&gt; next;\n\n   \n\n    post = cur -&gt; next ; // 刪除指標\n\n    cur -&gt; next = post -&gt; next ;\n\n    delete post ;\n\n    post = NULL ;\n\n       \n\n    for( cur = p; cur != NULL; cur = cur -&gt; next) // 印出結果1245\n\n        cout &lt;&lt; cur -&gt; item &lt;&lt; endl;\n\n    return 0;\n\n}\n\n先創建一個名叫p裡面可存int的指標，再用for迴圈使p的長度增長為5，裡面儲存的數字意義為是第幾個指標，再刪除第3個指標，最後印出p的所有內容，印出結果為1245。",
        "output": "Design your code to be robust for special cases!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 118. 令ptrX指向鏈結串列的節點，比較ptrX = ptrX-&gt;next和ptrX-&gt;next = ptrX的差異。\n\n1. ptrX= ptrX -&gt; next:\n\nptrX 指向的是現在這個節點位址的下一個位址 ( ptrX 在 Linked List 上向右移動)。\n\n2. ptrX-&gt;next = ptrX:\n\nprtX指向的現在這個節點的下一個位址為自己本身這個節點的位址 ( 在 Linked List 上形成一個封閉的迴圈，會無法取得接下來的Linked List 資料)。",
        "output": "OK, but duplicate..."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 118. 令ptrX指向鏈結串列的節點，比較ptrX = ptrX-&gt;next和ptrX-&gt;next = ptrX的差異。\n\n假設ptrX所指向的鏈結串列為: \n\n\n\n\n若ptrX = ptrX-&gt;next ，則ptrX指向原本指的節點的下一個。\n\n所以操作完成之後，ptrX所指的節點會變成:\n\n\n\n若ptrX-&gt;next = ptrX 會使得ptrX 指的節點的下一個同樣是原本ptrX 指的節點，形成迴圈，而ptrX原本指向的節點的後面的節點全部遺失。\n\n所以操作完成之後，ptrX所指向的鏈結串列會變成:",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 令ptrX指向鏈結串列的節點，比較ptrX = ptrX-&gt;next和ptrX-&gt;next = ptrX的差異。\n\n假設現在有一個list像這樣：6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1，ptrX指向5。\n\n若ptrX=ptrX -&gt; next，則ptrX會由指5轉成指向4，但若是ptrX-&gt;next = ptrX的話，他會一直指向同一個點，不變。",
        "output": "Read the previous posts, which look better."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 得分已達27位同學。",
        "output": ""
    }
]
{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:53:54",
        "@type": "post",
        "@filename": "b000000006.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001296420",
        "node": "000000006",
        "site": "1000110001",
        "pt": "2023-10-12 02:29:21",
        "poster": "11127149",
        "realname": "李後霆",
        "email": "m3918513@gmail.com",
        "homepage": null,
        "subject": "119",
        "content": "<p>119. 寫C++程式碼說明刪除鏈結串列linked list第3個節點。</p>\r\n\r\n<p>程式碼:</p>\r\n\r\n<p>// 11127149 李後霆</p>\r\n\r\n<p>#include &lt;iostream&gt;</p>\r\n\r\n<p>using namespace std;</p>\r\n\r\n<p>typedef int DataType;</p>\r\n\r\n<p>struct Node{</p>\r\n\r\n<p>&nbsp; &nbsp; DataType data;</p>\r\n\r\n<p>&nbsp; &nbsp; Node *next;</p>\r\n\r\n<p>};</p>\r\n\r\n<p>class List</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; private:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Node *head;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; int size;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Node *find( int index );</p>\r\n\r\n<p>&nbsp; &nbsp; public:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; List();</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; int getLength();</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; void insert( int index, DataType newData );</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; void remove( int index );</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; void printList();</p>\r\n\r\n<p>};</p>\r\n\r\n<p>Node *List::find( int index )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; if ( index &lt; 1 || index &gt; getLength() )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; return NULL;</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; Node *cur = head;</p>\r\n\r\n<p>&nbsp; &nbsp; for ( int i = 1; i &lt; index; i++ )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; cur = cur-&gt;next;</p>\r\n\r\n<p>&nbsp; &nbsp; return cur;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>List::List()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; head = NULL;</p>\r\n\r\n<p>&nbsp; &nbsp; size = 0;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>int List::getLength()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; return size;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>void List::insert( int index, DataType newData )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; int listLength = getLength() + 1;</p>\r\n\r\n<p>&nbsp; &nbsp; if ( index &lt; 1 || index &gt; listLength )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; endl &lt;&lt;&quot;Error: Out of Range.&quot;;</p>\r\n\r\n<p>&nbsp; &nbsp; else</p>\r\n\r\n<p>&nbsp; &nbsp; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; size = listLength;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Node *newNode = new Node;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; newNode-&gt;data = newData;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; if ( index == 1 )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newNode-&gt;next = head;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head = newNode;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; else</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Node *pre = find( index - 1 );</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newNode-&gt;next = pre-&gt;next;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pre-&gt;next = newNode;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>void List::remove( int index )</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; if ( index &lt; 1 || index &gt; getLength() )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; endl &lt;&lt;&quot;Error: Out of Range.&quot;;</p>\r\n\r\n<p>&nbsp; &nbsp; else</p>\r\n\r\n<p>&nbsp; &nbsp; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Node *dl;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; if ( index == 1 )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dl = head;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head = head-&gt;next;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; else</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Node *pre = find( index - 1 );</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dl = pre-&gt;next;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pre-&gt;next = dl-&gt;next;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; dl-&gt;next = NULL;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; delete dl;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; dl = NULL;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; size--;</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>void List::printList()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; for ( Node *cur = head; cur != NULL; cur = cur-&gt;next )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; cur-&gt;data &lt;&lt; &quot; &quot;;</p>\r\n\r\n<p>&nbsp; &nbsp; cout &lt;&lt; endl;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>int main()</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp; &nbsp; List listA;</p>\r\n\r\n<p>&nbsp; &nbsp; DataType inputData[5] = { 1, 2, 3, 4, 5 };</p>\r\n\r\n<p>&nbsp; &nbsp; for ( int i = 0; i &lt; 5; i++ )</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; listA.insert( i + 1, inputData[i] );</p>\r\n\r\n<p>&nbsp; &nbsp; listA.printList();</p>\r\n\r\n<p>&nbsp; &nbsp; listA.remove( 3 );</p>\r\n\r\n<p>&nbsp; &nbsp; listA.printList();</p>\r\n\r\n<p>}</p>\r\n\r\n<p>輸出:</p>\r\n\r\n<p>1 2 3 4 5</p>\r\n\r\n<p>1 2 4 5</p>\r\n\r\n<p>說明:</p>\r\n\r\n<p>將陣列inputData的資料透過insert()儲存於鏈結串列listA內，printList會輸出:</p>\r\n\r\n<p>1 2 3 4 5</p>\r\n\r\n<p>透過remove()將listA第3個節點刪除:</p>\r\n\r\n<p>1.確認要刪除的節點是否不存在(false)</p>\r\n\r\n<p>2.建立指標dl</p>\r\n\r\n<p>3.確認要刪除節點是否為第1個(false)</p>\r\n\r\n<p>4.建立指標pre指向要刪除節點前一節點(第2節點)</p>\r\n\r\n<p>5.dl指向pre-&gt;next指向節點(第3節點)</p>\r\n\r\n<p>6.pre-&gt;next指向dl-&gt;next指向節點(第4節點)(第2節點指向第4節點)</p>\r\n\r\n<p>7.dl-&gt;next指向NULL(斷開第3節點和第4節點)</p>\r\n\r\n<p>8.delete dl; dl = NULL(刪除第3節點),size--(鏈結串列長度減1)</p>\r\n\r\n<p>刪除後，printList會輸出:</p>\r\n\r\n<p>1 2 4 5</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "40",
        "lang": "1"
    }
}
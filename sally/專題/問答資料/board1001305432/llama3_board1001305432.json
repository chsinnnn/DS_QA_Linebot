[
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: struct Pair {\n\nint idx;\n\nint value;\n\n};\n\nPair input[5005];\n\nvoid twoPointer() {\n\nint i, j, k;\n\nfor (i = 0; i &lt; n-2; i++) {\n\nj = i+1;\n\nk = n-1;\n\nwhile (j&lt;k) {\n\nif (input[i].value + input[j].value + input[k].value == S) {\n\ncout &lt;&lt; input[i].idx &lt;&lt;     &lt;&lt; input[j].idx &lt;&lt;     &lt;&lt; input[k].idx &lt;&lt;     &lt;&lt; endl;\n\nhaveans = true;\n\nbreak;\n\n}\n\nelse if (input[i].value + input[j].value + input[k].value &gt; S) {\n\nk--;\n\n}\n\nelse if (input[i].value + input[j].value + input[k].value &lt; S) {\n\nj++;\n\n}\n\n}\n\n}\n\n}\n\n這題會用twopointer來解，輸入方面給定長度為n的陣列三個數字合為S,陣列以pair的型態輸入才不會排序後亂掉。\n\n預處理部分先做排序，外層迴圈 i 會線性跑過已排序陣列，j, k為左指標和右指標，三數和&gt;x, k--, 反之j++直到結束\n\n複雜度O(N^2)",
        "output": "fine, but not complete."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: # include &lt;iostream&gt;\n\nusing namespace std ;\n\n  \n\nvoid Modify_value( int n ) {\n\n        n = n * 2 ;\n\n}  // Modify_value()\n\n  \n\nint main( void ) {\n\n        int n = 5 ;\n\n        cout &lt;&lt;  Before calling Modify_value : n =   &lt;&lt; n &lt;&lt; endl ;\n\n        Modify_value( n ) ;\n\n        cout &lt;&lt;  After calling Modify_value : n =   &lt;&lt; n &lt;&lt; endl ;\n\n        return 0 ;\n\n}  // main()",
        "output": ""
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 可以通過改變函數參數的數量，類型來實現函數多載(overloading)。\n\n以下是一個簡單的例子~\n\n---\nclass MyClass {\npublic:\n  // Method Overloading (Function Overloading) in C++\n  void display() {\n    std::cout &lt;&lt;  Hello &lt;&lt; std::endl;\n  }\n\n  void display(int x) {\n    std::cout &lt;&lt;  Hello, your number is:  &lt;&lt; x &lt;&lt; std::endl;\n  }\n};\n\nint main() {\n  MyClass obj;\n\n  // Call without parameters\n  obj.display();\n  \n  // Call with one integer parameter\n  obj.display(5);\n  \n  return 0;\n}\n---\n\n在上述程式碼中，我定義了兩個名為 `display` 的method，但是它們接受的參數不同。一個不接受任何參數，另一個接受一個integer參數。根據調用函數時提供的參數，適當的方法將被調用。這就是overload的基本概念w",
        "output": "Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 後序式轉中序式\n\n從左邊開始尋找不在括號內的運算子，將找到的運算子移動到其左邊的兩個運算元(或者已被括號的子算式)中間，並加上括號，直到式子已看到最右邊了。\n\n參考資料: https://magiclen.org/arithmetic/\n\n原式 = a b + c * d e + f * + w z + *\n\n         = ( a + b ) c * d e + f * + w z + *\n\n         = ( ( a + b ) * c ) d e + f * + w z + *\n\n         = ( ( a + b ) * c ) ( d + e ) f * + w z + *\n\n         = ( ( a + b ) * c ) ( ( d + e ) * f ) + w z + *\n\n         = ( ( ( a + b ) * c ) + ( ( d + e ) * f ) ) w z + *\n\n         = ( ( ( a + b ) * c ) + ( ( d + e ) * f ) ) ( w + z ) *\n\n         = ( ( ( ( a + b ) * c ) + ( ( d + e ) * f ) ) * ( w + z ) )\n\n簡化 = ( ( a + b ) * c + ( d + e ) * f ) * ( w + z )",
        "output": "Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: a b + c * d e + f * + w z + *\n\n=( a + b ) c * d e + f * + w z + *\n\n=( a + b ) * c d e + f * + w z + *\n\n=( a + b ) * c ( d + e ) f * + w z + *\n\n=( a + b ) * c ( d + e ) * f + w z + *\n\n=( a + b ) * c + ( d + e ) * f w z + *\n\n=( a + b ) * c + ( d + e ) * f (w + z ) *\n\n=( ( a + b ) * c + ( d + e ) * f ) * (w + z )",
        "output": "late..."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: #include &lt;iostream&gt;\n\n\nclass Animal {\npublic:\n   \n    void eat() {\n        std::cout &lt;&lt;  Animal is eating.  &lt;&lt; std::endl;\n    }\n};\n\n\nclass Dog : public Animal {\npublic:\n    \n    void bark() {\n        std::cout &lt;&lt;  Dog is barking.  &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n  \n    Dog myDog;\n\n    \n    myDog.eat();\n\n\n    myDog.bark();\n\n    return 0;\n}",
        "output": ""
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: # include &lt;iostream&gt;\n\nusing namespace std ;\n\nvoid math( int x ){\n\n    x = x + 1 ;\n\n    cout &lt;&lt;  math_x :   &lt;&lt; x &lt;&lt;  \\n  ; // 印出答案為 1\n\n} // math( int x )\n\nint main(){\n\n    int x = 0 ;\n\n    cout &lt;&lt;  firse_x :   &lt;&lt; x &lt;&lt;  \\n  ; // 印出答案為 0\n\n    math( x ) ;\n\n    cout &lt;&lt;  final_x :   &lt;&lt; x &lt;&lt;  \\n  ; // 印出答案仍為 0\n\n} // main",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: #include &lt;iostream&gt;\n\nusing namespace std ;\n\nvoid CallByValue( int i, int k ) {\n    i = i + 100 ;\n    k = k * k + 20 ;\n    i = i + k ;  // 希望回傳的值是處理過後的i加上k \n    \n}\n\nint main() {\n    int i = 2 ;\n    int k = 4 ;\n    CallByValue( i, k ) ; // 因為是void 所以值不會回傳 \n    cout &lt;&lt; i &lt;&lt; endl ;\n    return 0 ;\n    \n}",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: #include &lt;iostream&gt;\n\nusing namespace std;\n\nclass function {\n\npublic:\n\n    // 兩個數相加\n\n    int add(int a, int b) {\n\n        return a + b;\n\n    }\n\n    //三個數相加\n\n    int add(int a, int b, int c) {\n\n        return a + b + c;\n\n    }\n\n};\n\nint main() {\n\n    function calc;\n\n    cout &lt;&lt;  兩個數相加:   &lt;&lt; calc.add(5, 3) &lt;&lt; endl;\n\n    cout &lt;&lt;  三個數相加:   &lt;&lt; calc.add(3, 4, 5) &lt;&lt; endl;\n\n    return 0;\n\n}\n\n利用overloading的方法，透過輸入不同數量的數字，來進入不同的函式中進行相加，進而實現多載",
        "output": "Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: C++的 overloading 是指相同函數名稱但參數型態或數量不同。回傳的資料型態不會影響到Overloading，相同與否沒有關係。由於編譯器根據參數內容來辨別該用哪個函數，參數內容一定要不同，不然會發生ambiguity(編譯器不知道該用哪個函數)。\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Addition {\n    \n    public:\n        \n        int add(int a, int b) {                    // 如果傳入的兩個數是整數型態，編譯器會使用此函數\n\n            cout &lt;&lt;  Using int-type addition  &lt;&lt; endl;\n            return a + b;\n        }\n\n        double add(double a, double b) {  // 若傳入的兩數是雙倍浮點數型態，會使用此函數。\n\n            cout &lt;&lt;  Using double-type addition  &lt;&lt; endl;\n            return a + b;\n        }\n};\n\nint main()  {\n\n    Addition obj;\n\n    cout &lt;&lt; obj.add(12, 13) &lt;&lt;  \\n ;                // 傳入整數\n    cout &lt;&lt; obj.add( 1.01, 3.0212 ) &lt;&lt;  \\n ;    // 傳入雙倍浮點數\n\n}",
        "output": "參數內容一定要不同，不然會發生ambiguity \n\n舉的例子正好就是會造成ambiguous： obj.add(12, 3.0212)要呼叫哪一個？"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 題目 : 將後序式 a b + c * d e + f * + w z + * ，轉換為中序式 infix。\n\n後序式 postfix ( 左 -&gt; 右 -&gt; 中 ) \n\n中序式 infix ( 左 -&gt; 中 -&gt; 右 )\n\n\n我會先將後序式寫成樹狀圖(如下圖)，再對照此圖寫出中序式\n\n=&gt; ( ( a + b ) * c + ( d + e ) * f ) * (w + z )",
        "output": "Good!\n\nBinary expression tree"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 1. (ab+)c*(de+)f*+(wz+)*\n\n由於postfix是依照 左-&gt;右-&gt;中 來輸出，所以我們景需要先將其節點最下端的合成就行，寫成式子的postfix會有一個特點，就是當有兩個數字連在一起時，其為該分支的最後兩個節點，故將其進行運算，而運算符號則為他們的右方(左-&gt;右-&gt;中)\n\n2. [(a+b)c* ][ (d+e)f*]+(w+z)*\n\n然後我們因為將其代數化，所以只要將括號內的看成一個代數，並繼續我們之前的邏輯進行運算\n\n3. {[(a+b)*c][(d+e)*f]+}(w+z)*\n\n4. {[(a+b)*c]+[(d+e)*f]}(w+z)*\n\n5. { [ (a + b) * c ]+[ ( d + e ) * f ] } * ( w + z )\n\n即可達成infix排序\n\n若要將infix回推成postfix則將上面完成的運算符號在該括號內往右推即可(若沒有括號則直接推到最右端)，最後刪除括號即完成\n\n若要將infix回推成prefix則將上面完成的運算符號在該括號內往左推即可(若沒有括號則直接推到最左端)，最後刪除括號即完成",
        "output": "Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: #include &lt;iostream&gt;\n\nusing namespace std;\n\nclass People {\n    \n    protected:\n        \n        int    pro = 0; \n        void dance() {\n            \n            cout &lt;&lt; pro &lt;&lt; endl;\n            \n        }\n    \n    private:\n        \n        int pri = 1;\n        void sing() {\n            \n            cout &lt;&lt; pri &lt;&lt; endl;\n            \n        }\n        \n    public:\n        \n        int pub = 2;\n        void cry() {\n            \n            cout &lt;&lt; pub &lt;&lt; endl;\n            \n        }\n    \n    \n};\n\nclass Students : public People {\n    \n    \n    public:\n        \n        void write() {    \n        \n            cout &lt;&lt; d &lt;&lt; endl;\n            cout &lt;&lt; pro &lt;&lt; endl;  \n            cout &lt;&lt; pub &lt;&lt; endl;\n            \n            // cout &lt;&lt; pri &lt;&lt; endl; ( 父類別private中的變數、函式無法被其子類別使用 )\n            \n        }\n        \n        \n    private:\n        \n        int d = -1;\n    \n};\n\nint main() {\n    \n    Students man;\n    man.write();\n\n} \n\n父類別為People，而其子類別為Students。\n\n一個子類別( Students )的物件，可以使用/控制父類別( People )裡在public及protected中所宣告的變數及函式。",
        "output": "Good!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 已得分共38位同學。",
        "output": ""
    }
]
{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:50:53",
        "@type": "post",
        "@filename": "b000000002.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001305437",
        "node": "000000002",
        "site": "1000110001",
        "pt": "2023-11-24 17:19:34",
        "poster": "11020126",
        "realname": "鄭祐昀",
        "email": "carry0987@gmail.com",
        "homepage": null,
        "subject": "208. 撰寫程式碼指出影響氣泡排序是否穩定stable的關鍵指令。",
        "content": "<p>氣泡排序是一種通過反覆遍歷要排序的數列，比較每對相鄰元素，並將它們的順序對調（如果它們的順序錯誤）的演算法。穩定性指的是排序算法能否保持相同元素原始的相對順序不變；如果算法能做到這一點，它就是穩定的。</p>\r\n\r\n<p>在做氣泡排序時，如果遇到兩個一樣的數，為了保持排序的穩定性，我們不應該交換它們的位置。穩定的氣泡排序會確保這些相同的數在排序完成後，它們的前後順序和在未排序之前是一樣的。</p>\r\n\r\n<p>簡單來說，為了讓氣泡排序保持穩定，關鍵是相等的元素不可以交換位置。在一個經典的氣泡排序實現中，這個穩定性是自然達成的，因為當兩個元素相等時算法不會做任何動作。這就意味著等值的元素會保持它們原始的順序，從而使排序過程是穩定的。</p>\r\n\r\n<p>以下是範相關的C++範例</p>\r\n\r\n<blockquote>\r\n<p>#include &lt;iostream&gt;<br />\r\n#include &lt;vector&gt;</p>\r\n\r\n<p>void bubbleSort(std::vector&lt;int&gt;&amp; arr) {<br />\r\n&nbsp; &nbsp; int n = arr.size();<br />\r\n&nbsp; &nbsp; bool swapped;</p>\r\n\r\n<p>&nbsp; &nbsp; for(int i = 0; i &lt; n - 1; i++) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; swapped = false;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; for(int j = 0; j &lt; n - i - 1; j++) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 關鍵點在於使用 &quot;小於等於&quot; 操作<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 這會導致相同值的元素不會交換<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (arr[j] &gt; arr[j + 1]) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 交換arr[j]和arr[j + 1]<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::swap(arr[j], arr[j + 1]);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; swapped = true;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; // 如果在某一輪沒有發生交換，則表示陣列已排序好<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if (!swapped)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />\r\n&nbsp; &nbsp; }<br />\r\n}</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp; &nbsp; std::vector&lt;int&gt; arr = {64, 34, 25, 12, 22, 11, 90};<br />\r\n&nbsp; &nbsp; bubbleSort(arr);</p>\r\n\r\n<p>&nbsp; &nbsp; std::cout &lt;&lt; &quot;Sorted array: \\n&quot;;<br />\r\n&nbsp; &nbsp; for (int i = 0; i &lt; arr.size(); i++)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;<br />\r\n&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</p>\r\n\r\n<p>&nbsp; &nbsp; return 0;<br />\r\n}</p>\r\n</blockquote>\r\n\r\n<p>在上面的程式碼中，要維持氣泡排序的穩定性，注重的是在內層循環遇到相等元素時不進行交換。雖然這裡沒有明確使用&quot;小於等於&quot;來進行比較（因為這會造成不必要的交換），但避免了對等值的元素進行交換，因為它只在 `arr[j] &gt; arr[j + 1]` 的情況下進行交換。<br />\r\n&nbsp;</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "20",
        "lang": "1"
    }
}
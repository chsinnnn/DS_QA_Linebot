[
    {
        "instruction": "請根據以下問題的回答作出評論，並判斷回答是否正確",
        "input": "題目:   答案: 進行刪除時會碰到以下幾種情況：  1. 要刪除的節點沒有子節點，即要刪除的為葉節點，直接將該節點刪除。    2. 要刪除的節點有一個子節點，就用子節點補位，也就是刪除該節點且讓該節點的父節點與子節點相接。    3.要刪除的節點有兩個子節點，要找比該節點小的最大節點或比該節點大的最小節點，即找左子樹最大值或是右子樹最小值做為取代點，選其中一個和要刪除的節點交換並刪除待刪節點。",
        "output": "評論:Nice!"
    },
    {
        "instruction": "請根據以下問題的回答作出評論，並判斷回答是否正確",
        "input": "題目:   答案: 陣列實作堆積結構的優點在於實作簡單，隨機存取效率高，是一種線性存儲結構，但是，使用陣列有較高的空間浪費，大小固定且訪問效率較低的缺點。  相對地，使用指標實作堆積結構的優點在於優秀的空間利用效率，支援自由結構，可以實現複雜的結構，但是實作較為複雜，可能會產生記憶體碎片化問題，且訪問效率較低。",
        "output": "評論:OK"
    },
    {
        "instruction": "請根據以下問題的回答作出評論，並判斷回答是否正確",
        "input": "題目:   答案: 排序後，相同鍵值的元素相對位置可能改變。  堆排序不穩定的例子:  考慮數組 [21 20a 20b 12 11 8 7]（已經是最大堆格式）。  這裡 20a = 20b 只是為了區分我們將它們表示為 20a 和 20b 的順序。  雖然 heap sort 第一個 21 被刪除並放置在最後一個索引中，然後 20a 被刪除並放置在最後一個索引中，而 20b 在最後一個索引中，但兩個索引中因此在堆排序之後數組看起來像[7 8 11 12 20b 20a 21]。  它不保留元素的順序，因此不穩定。",
        "output": "評論:例子OK，只是文字敘述不太精確；從 20a 被刪除並放置在最後一個索引中...  開始就有些混淆，全都是最後一個索引？"
    },
    {
        "instruction": "請根據以下問題的回答作出評論，並判斷回答是否正確",
        "input": "題目:   答案: 需要先判斷是三種case的哪一種再去做刪除的動作。  Case1: 沒有子節點，我們可以直接刪掉這個節點，假如是刪掉父節點的右節點，要然後將其父節點的右節點指向NULL。    Case2: 如果要刪除的節點有一個子節點，那我們要將此節點的父節點指向要刪除節點的子節點，然後再刪除。    Case3:節點有左右兩邊的子樹，如果要刪除的節點是在左邊，則取其子樹的最右邊(也就是最大值)來替代。  反之，如果要刪除的節點是在右邊，則取其子樹的最左邊(最小值)來替代。",
        "output": "評論:Good pictures!  Case 3可能描述的邏輯不太準確。  欲刪除的節點有有左右子樹， 如果要刪除的節點是在左邊 這句話就語焉不詳了...  圖例欲刪除150，其實175或125均可擇一替代。"
    },
    {
        "instruction": "請根據以下問題的回答作出評論，並判斷回答是否正確",
        "input": "題目:   答案: 要刪除的節點沒有子節點：直接刪除。Eg.11  要刪除的節點有一個子節點：先將其父節點與其子節點相接再刪除。Eg.12(9與11相接)  要刪除的節點有兩個子節點：先將要刪除的節點與其左子樹最大值或右子樹最小值交換再刪除。Eg.8(8與7或9交換)",
        "output": "評論:Good!"
    },
    {
        "instruction": "請根據以下問題的回答作出評論，並判斷回答是否正確",
        "input": "題目:   答案: 差異/類型 \t\t\t \t\t\t \t\t\t二元搜尋樹 \t\t\t \t\t\t \t\t\t堆積 \t\t\t \t\t \t\t \t\t\t \t\t\t結構 \t\t\t \t\t\t \t\t\t二元樹 \t\t\t \t\t\t \t\t\t完全二元樹 \t\t\t \t\t \t\t \t\t\t \t\t\t值 \t\t\t \t\t\t \t\t\t右節點大於根 左節點小於根 \t\t\t \t\t\t \t\t\t根大於等於或小於等於子節點（最大堆或最小堆） \t\t\t \t\t \t\t \t\t\t \t\t\t找尋最大值時間複雜度 \t\t\t \t\t\t \t\t\tO(logn) \t\t\t \t\t\t \t\t\tO(1)（最大堆）",
        "output": "評論:nice."
    }
]
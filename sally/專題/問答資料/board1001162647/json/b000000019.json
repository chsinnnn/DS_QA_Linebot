{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 09:04:57",
        "@type": "post",
        "@filename": "b000000019.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001162647",
        "node": "000000019",
        "site": "1000110001",
        "pt": "2022-10-01 15:25:45",
        "poster": "11027147",
        "realname": "邱峻彥",
        "email": "jim97503@gmail.com",
        "homepage": null,
        "subject": "108. 若遞迴到某層就異常終止，要如何強制它繼續執行到下一層？",
        "content": "<p>這邊我目前想到的異常中止的原因應該是因為推疊空間不足所造成的。每一個編譯器都會給我們預設的堆疊空間，當我們每一次在呼叫一個函式的時候堆疊上的空間就被佔掉一部份(像是費式數列中的參數n在每一層都是佔不同的記憶體位子)， 一直到函式結束 (return) 時這些空間才會被釋放出來。因此有可能還沒到達return時就已經超過預設的堆疊空間了。那如果要強制執行下去的話，就必須要增加堆疊空間，而每一個編譯器增加堆疊空間的方式都不太一樣，舉例 :&nbsp;在 Visual C++ 中要用介面下面的編譯器選項來增加堆疊的大小。</p>\r\n\r\n<p>總結 : 我上述認為異常中止的這個原因有可能不是真實的中止原因，因此我也好奇如果不是這種原因該怎麼讓遞迴強制執行(反問題目算一種遞迴嗎哈哈)，但如果發生推疊空間不足狀況的話可以透過增加堆疊的大小處理。不過更好的方法還是想出一個不會佔太多堆疊空間的演算法。</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "49",
        "lang": "1"
    }
}
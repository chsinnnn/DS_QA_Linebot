{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:54:22",
        "@type": "post",
        "@filename": "b000000004.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001296423",
        "node": "000000004",
        "site": "1000110001",
        "pt": "2023-11-17 23:00:40",
        "poster": "11127137",
        "realname": "黃乙家",
        "email": "u810025@gmail.com",
        "homepage": "https://ja-errorpro.cf",
        "subject": "204",
        "content": "<p><strong><span style=\"font-size:18px\">舉例說明多重佇列如何模擬，須指出選擇佇列的策略。</span></strong></p>\r\n\r\n<p><strong>FCFS(First Come First Served)</strong>:</p>\r\n\r\n<p>先到先做，缺點是CPU利用度低</p>\r\n\r\n<p><strong>Round Robin(RR):</strong></p>\r\n\r\n<p>Process還是先到先做，但執行時間固定，適合做分時系統(Time sharing)</p>\r\n\r\n<p>如果時間量太長就如同FCFS</p>\r\n\r\n<p>如果時間量太短，CPU會切換得太頻繁導致效率變差</p>\r\n\r\n<p><strong>多佇列排程：</strong></p>\r\n\r\n<p>每個Process都有優先度，依優先度來分類到不同的queue，高優先度採用Round Robin策略排程，而低的可能使用FCFS</p>\r\n\r\n<p>每當接到新任務時，先處理高優先度的任務，接著處理低的</p>\r\n\r\n<p>但這種方式有個缺點是如果高優先度的Process一直佔著CPU會造成Starvation(低優先度永遠無法被執行)</p>\r\n\r\n<p>解決方法是加上計時(Aging)功能，來調整佇列優先度，如果一直沒執行到優先度就增加，如果執行時間太久就降低</p>\r\n\r\n<p>一個例子是Foreground Process與Background Process</p>\r\n\r\n<p>Foreground Process需要高優先度，採用RR策略</p>\r\n\r\n<p>Background Process則可使用FCFS</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "25",
        "lang": "1"
    }
}
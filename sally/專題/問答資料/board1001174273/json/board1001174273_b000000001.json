{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:59:22",
        "@type": "post",
        "@filename": "b000000001.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001174273",
        "node": "000000001",
        "site": "1000110001",
        "pt": "2022-09-29 00:09:49",
        "poster": "11027229",
        "realname": "卓榮暉",
        "email": "intercoursedr@gmail.com",
        "homepage": null,
        "subject": "114. 寫出C++程式碼說明同類別兩個方法如何實現多載overloading",
        "content": "<p>在C++中，有 Function Overloading 和 Operator Overloading，但此題是要講述 Function Overloading</p>\r\n\r\n<p>那什麼是Function Overloading呢?<br />\r\n1.同樣名稱的函數有多種格式，或說多個函數共用一個函數名稱<br />\r\n2.可以定義兩個有相同名稱的函數，但函數簽名 (Signature) 必須不同<br />\r\n&nbsp;</p>\r\n\r\n<p>那Function Overloading有什麼好處呢?</p>\r\n\r\n<p>1. 避免詞窮的好辦法(想想如果命名20幾個Function，但做的事情大同小異)<br />\r\n2. 因為建構子的名稱必須和class name一樣，因此可以產生許多建構子而不會發生錯誤<br />\r\n3. 讓其他開發者能夠更輕鬆的去使用你所寫的API (不用去背或者查詢很多名稱，而是透過帶入不同參數得出想要的結果)</p>\r\n\r\n<p>// 用來示範的一個程式&nbsp;<br />\r\n#include&lt;bits/stdc++.h&gt; // 我很抱歉&nbsp;<br />\r\nusing namespace std; // 我真的很抱歉&nbsp;</p>\r\n\r\n<p>// 用來示範的一個程式&nbsp;<br />\r\nclass Student{<br />\r\n&nbsp;&nbsp; &nbsp;public:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 沒有參數的建構子&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Student(){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; name = &quot;ABC&quot;;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; studentID = 0;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 具有參數的建構子<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 至於為什麼可以辦到和前面的method name 一樣 是因為有overloading<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Student(int ID, string name){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; name = name;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; studentID = ID;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 取得ID&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int getID(){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return studentID;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 取得名字&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;string getName(){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return name;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 下面兩個名字一樣的Function可以同時存在 因為參數不同&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;void Change(int id){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; studentID = id;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 這樣依然可以存在&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;void Change(char c){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;printf(&quot;笑死\\n&quot;);<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 但底下的就不合法了 因為與上面的重複<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 所以在使用overloading的時候還是要小心&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;/*<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;void Change(int k){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;printf(&quot;%d\\n&quot;,k);<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;*/<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;void Change(int id, string name){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; studentID = id;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; name = name;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 注意 這樣是會出錯的<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 雖然return type不同 但帶入的參數相同 因此無法同時存在&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;/*<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int Change(int c){<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this -&gt; studentID = id<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return 0;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;*/<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;// 防止其他地方的程式去存取這兩個東西&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;private:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int studentID;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;string name;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n};</p>\r\n\r\n<p>int main(){<br />\r\n&nbsp;&nbsp; &nbsp;Student a(12,&quot;123&quot;); // Initialize through Constructor with arguments<br />\r\n&nbsp;&nbsp; &nbsp;Student b; // Initialize through Constructor without arguments<br />\r\n&nbsp;&nbsp; &nbsp;printf(&quot;%d\\n&quot;,a.getID()); // 12<br />\r\n&nbsp;&nbsp; &nbsp;printf(&quot;%d\\n&quot;,b.getID()); // 0<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;// 同樣是Change，但隨著帶入的參數不同，而有不同的效果&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;a.Change(345);<br />\r\n&nbsp;&nbsp; &nbsp;b.Change(87,&quot;DEF&quot;); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;printf(&quot;%d\\n&quot;,a.getID()); // 345<br />\r\n&nbsp;&nbsp; &nbsp;printf(&quot;%s\\n&quot;,a.getName().c_str()); // 123<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;printf(&quot;%d\\n&quot;,b.getID()); // 87<br />\r\n&nbsp;&nbsp; &nbsp;printf(&quot;%s\\n&quot;,b.getName().c_str()); // DEF<br />\r\n}</p>\r\n\r\n<p>還有一個東西很常被搞混 那就是Override<br />\r\n至於什麼是Override，就先不討論了，有興趣的人可以Google一下<br />\r\n(參考資源:&nbsp;<br />\r\nhttp://kaiching.org/pydoing/cpp/cpp-overload.html<br />\r\nhttps://openhome.cc/Gossip/CppGossip/OverloadedFunction.html<br />\r\nhttps://notfalse.net/58/overload)</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "141",
        "lang": "1"
    }
}
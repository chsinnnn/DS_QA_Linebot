{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:59:22",
        "@type": "post",
        "@filename": "b000000004.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001174273",
        "node": "000000004",
        "site": "1000110001",
        "pt": "2022-10-02 14:40:17",
        "poster": "11020107",
        "realname": "蘇伯勳",
        "email": "pohsun.su@gmail.com",
        "homepage": null,
        "subject": "111. 寫出C++程式碼說明傳值呼叫call by value。",
        "content": "<p>#include &lt;bits/stdc++.h&gt;<br />\r\nusing namespace std;</p>\r\n\r\n<p>/*<br />\r\n1. Call by value :<br />\r\n&nbsp; &nbsp; main()中的變數值被複製到副函式swap_CallByValue()，<br />\r\n&nbsp; &nbsp; 意即使用的新的記憶體位址，不會改動到主函式main()中的值；<br />\r\n*/</p>\r\n\r\n<p>void swap_CallByValue( int value1, int value2 ) {<br />\r\n&nbsp; &nbsp; int temp = value1;<br />\r\n&nbsp; &nbsp; value1 = value2;<br />\r\n&nbsp; &nbsp; value2 = temp;<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;After swapped by using call by value in sub fucntion :\\nvalue1 is &quot; &lt;&lt; value1 &lt;&lt; &quot; and value2 is &quot; &lt;&lt; value2 &lt;&lt; &quot;\\n&quot;;<br />\r\n} // swap_CallByValue()</p>\r\n\r\n<p>/*<br />\r\n2. Call by address/pointer :<br />\r\n&nbsp; &nbsp; 本質上也是一種call by value，只不過此value就是指標，複製的也是指標。<br />\r\n&nbsp; &nbsp; 主函式main()傳入位址後，副函式swap_CallByAddress()以指標指向記憶體位址；<br />\r\n&nbsp; &nbsp; 由於交換了記憶體位址，因此回到主函式main()後原本的值會交換。<br />\r\n*/</p>\r\n\r\n<p>void swap_CallByAddress( int *address1, int *address2 ) {<br />\r\n&nbsp; &nbsp; int temp = *address1;<br />\r\n&nbsp; &nbsp; *address1 = *address2;<br />\r\n&nbsp; &nbsp; *address2 = temp;<br />\r\n} // swap_CallByAddress()</p>\r\n\r\n<p>/*<br />\r\n3. Call by reference :<br />\r\n&nbsp; &nbsp; 僅限C++，直接傳入位址去交換，所以回到主函式main()後原本的值也會交換。<br />\r\n&nbsp; &nbsp; 由於call by address是用指標指向位址，因此指標本身也具有位址；<br />\r\n&nbsp; &nbsp; 而call by reference是直接傳入位址，本身不具位址。<br />\r\n*/</p>\r\n\r\n<p>void swap_CallByReference( int &amp;reference1, int &amp;reference2 ) {<br />\r\n&nbsp; &nbsp; int temp = reference1;<br />\r\n&nbsp; &nbsp; reference1 = reference2;<br />\r\n&nbsp; &nbsp; reference2 = temp;<br />\r\n} // swap_CallByReference()</p>\r\n\r\n<p>/*<br />\r\n4. 比較：<br />\r\n&nbsp; &nbsp; 【Call by value】：<br />\r\n&nbsp; &nbsp; (1)若使用太多且使用完沒刪掉未使用的記憶體空間，可能會導致記憶體不足而程式崩潰。<br />\r\n&nbsp; &nbsp; (2)由於要複製值，因此效能較差、較慢<br />\r\n&nbsp; &nbsp; (3)不會影響到主函式<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 【Call by address/pointer】：<br />\r\n&nbsp; &nbsp; (1)由於接收的是記憶體位址，因此在副函式中的任何變動都可能影響到主函式。<br />\r\n&nbsp; &nbsp; (2)也是一種call by value1<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 【Call by reference】：<br />\r\n&nbsp; &nbsp; (1)僅限C++<br />\r\n&nbsp; &nbsp; (2)會檢查記憶體位置是否合法<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; ex.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int iVal = 10;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int &amp;refVal = iVal; // 合法<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int &amp;refVal; // 非法，未初始化<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (error: &lsquo;refVal&rsquo; declared as reference but not initialized)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int &amp;refVal = 0; // 非法，初值必須是物件<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (error: cannot bind non-const lvalue reference of type &lsquo;int&amp;&rsquo; to an rvalue of type &lsquo;int&rsquo;)<br />\r\n&nbsp; &nbsp; (3)當作物件的別名(alias)使用<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 【效能比較】：<br />\r\n&nbsp; &nbsp; Call by reference = Call by address &gt; Call by value<br />\r\n*/</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp; &nbsp; int value1 = 10, value2 = 20;<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;The original values of call by value :\\nvalue1 is &quot; &lt;&lt; value1 &lt;&lt; &quot; and value2 is &quot; &lt;&lt; value2 &lt;&lt; &quot;\\n&quot;;<br />\r\n&nbsp; &nbsp; swap_CallByValue( value1, value2 );<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;After swapped by using call by value in main fucntion :\\nvalue1 is &quot; &lt;&lt; value1 &lt;&lt; &quot; and value2 is &quot; &lt;&lt; value2 &lt;&lt; &quot;\\n\\n&quot;;<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; int address1 = 30, address2 = 40;<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;The original values of call by address :\\naddress1 is &quot; &lt;&lt; address1 &lt;&lt; &quot; and address2 is &quot; &lt;&lt; address2 &lt;&lt; &quot;\\n&quot;;<br />\r\n&nbsp; &nbsp; swap_CallByAddress( &amp;address1, &amp;address2 );<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;After swapped by using call by address :\\naddress1 is &quot; &lt;&lt; address1 &lt;&lt; &quot; and address2 is &quot; &lt;&lt; address2 &lt;&lt; &quot;\\n\\n&quot;;<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; int reference1 = 50, reference2 = 60;<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;The original values of call by reference :\\nreference1 is &quot; &lt;&lt; reference1 &lt;&lt; &quot; and reference2 is &quot; &lt;&lt; reference2 &lt;&lt; &quot;\\n&quot;;<br />\r\n&nbsp; &nbsp; swap_CallByReference( reference1, reference2 );<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;After swapped by using call by reference :\\nreference1 is &quot; &lt;&lt; reference1 &lt;&lt; &quot; and reference2 is &quot; &lt;&lt; reference2 &lt;&lt; &quot;\\n\\n&quot;;<br />\r\n&nbsp; &nbsp; return 0;<br />\r\n} // main()</p>\r\n\r\n<p>輸出：</p>\r\n\r\n<p><img alt=\"\" src=\"/user/1/1/11020107/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202022-10-02%20212011.png\" style=\"height:367px; width:617px\" /></p>\r\n\r\n<p>參照：</p>\r\n\r\n<p><a href=\"https://dotblogs.com.tw/Ace_Dream/2016/06/01/callbyvalue_callbyaddress_callbyreference\">https://dotblogs.com.tw/Ace_Dream/2016/06/01/callbyvalue_callbyaddress_callbyreference</a></p>\r\n\r\n<p><a href=\"https://hackmd.io/@yunfanlu/r1xryJdSI#Call-by-reference\">https://hackmd.io/@yunfanlu/r1xryJdSI#Call-by-reference</a></p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "59",
        "lang": "1"
    }
}
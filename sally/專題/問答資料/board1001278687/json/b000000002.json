{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:52",
        "@type": "post",
        "@filename": "b000000002.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278687",
        "node": "000000002",
        "site": "1000110001",
        "pt": "2023-07-22 01:39:38",
        "poster": "06005636",
        "realname": "朱紘正",
        "email": "henry3446@gmail.com",
        "homepage": null,
        "subject": "搶答222",
        "content": "<p>222. 撰寫程式碼指出如何為二元搜尋樹新增節點。</p>\r\n\r\n<p>#include &lt;iostream&gt;</p>\r\n\r\n<p>struct TreeNode {<br />\r\n&nbsp;&nbsp;&nbsp; int data;<br />\r\n&nbsp;&nbsp;&nbsp; TreeNode* left;<br />\r\n&nbsp;&nbsp;&nbsp; TreeNode* right;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}<br />\r\n};</p>\r\n\r\n<p>class BinarySearchTree {<br />\r\npublic:<br />\r\n&nbsp;&nbsp;&nbsp; BinarySearchTree() : root(nullptr) {}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; // 新增節點<br />\r\n&nbsp;&nbsp;&nbsp; void insert(int val) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root = insertNode(root, val);<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>private:<br />\r\n&nbsp;&nbsp;&nbsp; // 遞迴插入節點的輔助函式<br />\r\n&nbsp;&nbsp;&nbsp; TreeNode* insertNode(TreeNode* node, int val) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 如果樹為空，則直接建立新節點<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (node == nullptr) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new TreeNode(val);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 遞迴往左子樹或右子樹插入節點<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (val &lt; node-&gt;data) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node-&gt;left = insertNode(node-&gt;left, val);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (val &gt; node-&gt;data) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node-&gt;right = insertNode(node-&gt;right, val);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 回傳根節點<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return node;<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; TreeNode* root;<br />\r\n};</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp;&nbsp;&nbsp; BinarySearchTree bst;<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(5);<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(3);<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(7);<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(1);<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(4);<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(6);<br />\r\n&nbsp;&nbsp;&nbsp; bst.insert(8);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; // 這裡可以加入其他對二元搜尋樹的操作，例如搜尋、刪除等</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; return 0;<br />\r\n}</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "18",
        "lang": "1"
    }
}
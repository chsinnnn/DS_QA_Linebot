{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:20",
        "@type": "post",
        "@filename": "b000000016.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278682",
        "node": "000000016",
        "site": "1000110001",
        "pt": "2023-07-21 17:42:08",
        "poster": "06005836",
        "realname": "陳予璇",
        "email": "jason40125520@gmail.com",
        "homepage": null,
        "subject": "搶答203",
        "content": "<p><strong>舉例說明雙重佇列如何模擬，需指出選擇佇列的策略</strong></p>\r\n\r\n<p><strong>雙重佇列（Dual Queue）模擬是一種模擬系統中同時存在兩個獨立佇列的情況。這類模擬常見於一個服務台（例如銀行）具有兩個不同類型的服務需求，或有兩個不同優先級的顧客。在雙重佇列模擬中，我們需要選擇佇列的策略，決定每個新到達的顧客應該加入哪個佇列，然後模擬兩個佇列的服務過程。</strong></p>\r\n\r\n<p><strong>以下是一個簡化的例子，展示了如何模擬雙重佇列，並使用「輪詢」（Round Robin）策略來選擇佇列：</strong></p>\r\n\r\n<p><strong>假設我們正在模擬一家銀行，銀行有兩個服務窗口：</strong></p>\r\n\r\n<p><strong>一個用於普通客戶，另一個用於VIP客戶。當顧客到達銀行時，我們按照輪詢策略依次將他們分配到不同的佇列中。即，每個新到達的顧客依次加入普通客戶佇列或VIP客戶佇列。</strong></p>\r\n\r\n<p><strong>import random</strong></p>\r\n\r\n<p><strong>def simulate_dual_queues(simulation_time, inter_arrival_time_mean, service_time_mean):</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;queue_normal = []</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;queue_vip = []</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;current_time = 0</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;total_waiting_time_normal = 0</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;total_waiting_time_vip = 0</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;num_customers_served_normal = 0</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;num_customers_served_vip = 0</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;is_vip_turn = False</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;while current_time &lt; simulation_time:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if is_vip_turn:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue = queue_vip</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue = queue_normal</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not queue:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If the queue is empty, set the next arrival time</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_arrival_time = random.expovariate(1 / inter_arrival_time_mean)</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_time += next_arrival_time</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.append(current_time)</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If the queue is not empty, process the next customer</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_service_time = random.expovariate(1 / service_time_mean)</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_time += next_service_time</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Calculate waiting time for the current customer</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;waiting_time = current_time - queue[0]</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if is_vip_turn:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_waiting_time_vip += waiting_time</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num_customers_served_vip += 1</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_waiting_time_normal += waiting_time</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num_customers_served_normal += 1</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.pop(0)</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_vip_turn = not is_vip_turn&nbsp; # Switch to the other queue for the next customer</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;average_waiting_time_normal = total_waiting_time_normal / num_customers_served_normal</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;average_waiting_time_vip = total_waiting_time_vip / num_customers_served_vip</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;return average_waiting_time_normal, average_waiting_time_vip</strong></p>\r\n\r\n<p><strong># Example usage:</strong></p>\r\n\r\n<p><strong>simulation_time = 10000&nbsp; # Total simulation time</strong></p>\r\n\r\n<p><strong>inter_arrival_time_mean = 5.0&nbsp; # Mean time between customer arrivals</strong></p>\r\n\r\n<p><strong>service_time_mean = 4.0&nbsp; # Mean service time</strong></p>\r\n\r\n<p><strong>normal_waiting_time, vip_waiting_time = simulate_dual_queues(simulation_time, inter_arrival_time_mean, service_time_mean)</strong></p>\r\n\r\n<p><strong>print(&quot;Average Waiting Time (Normal Queue):&quot;, normal_waiting_time)</strong></p>\r\n\r\n<p><strong>print(&quot;Average Waiting Time (VIP Queue):&quot;, vip_waiting_time)</strong></p>\r\n\r\n<p><strong>在這個示例中，我們使用了一個布林變數is_vip_turn來表示輪詢的狀態。當處理完一位VIP客戶後，將其設置為True，表示接下來的新顧客應該加入VIP客戶佇列，反之，將其設置為False，表示接下來的新顧客應該加入普通客戶佇列。這樣，我們就能夠交替地將新到達的顧客加入不同的佇列，模擬雙重佇列的服務過程。</strong></p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "12",
        "lang": "1"
    }
}
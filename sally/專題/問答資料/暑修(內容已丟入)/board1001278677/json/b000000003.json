{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:54:46",
        "@type": "post",
        "@filename": "b000000003.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278677",
        "node": "000000003",
        "site": "1000110001",
        "pt": "2023-07-05 12:05:00",
        "poster": "10827128",
        "realname": "林鑫宏",
        "email": "shawn140802@gmail.com",
        "homepage": null,
        "subject": "搶答107",
        "content": "<p>107. 若遞迴到某層就異常終止，要如何強制它繼續執行到下一層？</p>\r\n\r\n<p>可以在遞迴函式中用下列簡化的範例完成:</p>\r\n\r\n<p>void recursiveFunction(int step) {<br />\r\n&nbsp; &nbsp; try {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; // 可能引发异常的代码<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; throw MyException(&quot;error message&quot;); &nbsp;// 抛出异常对象</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; recursiveFunction(step + 1);<br />\r\n&nbsp; &nbsp; } catch (const MyException&amp; e) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; // 捕获并处理异常<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; std::cerr &lt;&lt; &quot;捕获到异常：&quot; &lt;&lt; e.what() &lt;&lt; std::endl;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; recursiveFunction(step + 1);<br />\r\n&nbsp; &nbsp; } catch (const std::exception&amp; e) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; // 捕获并处理其他类型的异常<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; std::cerr &lt;&lt; &quot;捕获到异常：&quot; &lt;&lt; e.what() &lt;&lt; std::endl;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; recursiveFunction(step + 1);<br />\r\n&nbsp; &nbsp; } catch (...) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; // 捕获并处理所有其他类型的异常<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; std::cerr &lt;&lt; &quot;捕获到未知异常&quot; &lt;&lt; std::endl;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; recursiveFunction(step + 1);<br />\r\n&nbsp; &nbsp; }<br />\r\n}<br />\r\n&nbsp;</p>\r\n\r\n<p>若在某層捕捉到錯誤，也能通過此類處理異常的語法直接進到下一次遞迴。</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "13",
        "lang": "1"
    }
}
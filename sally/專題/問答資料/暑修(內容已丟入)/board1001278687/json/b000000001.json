{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:52",
        "@type": "post",
        "@filename": "b000000001.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278687",
        "node": "000000001",
        "site": "1000110001",
        "pt": "2023-07-22 01:38:44",
        "poster": "06005636",
        "realname": "朱紘正",
        "email": "henry3446@gmail.com",
        "homepage": null,
        "subject": "搶答221",
        "content": "<p>221. 舉例解說中序走訪二元搜尋樹是否穩定排序。</p>\r\n\r\n<p>使用一個簡單的二元搜尋樹來舉例說明中序遍歷是否穩定排序。這裡舉例一個例子二元搜尋樹</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; 5<br />\r\n&nbsp;&nbsp; / \\<br />\r\n&nbsp; 3&nbsp;&nbsp; 8<br />\r\n&nbsp;/ \\ / \\<br />\r\n2&nbsp; 4 7&nbsp; 9</p>\r\n\r\n<p>進行中序遍歷，會得到以下的排序序列 =&gt; 2, 3, 4, 5, 7, 8, 9</p>\r\n\r\n<p>假設有兩個值相同的節點，節點A的值為3，節點B的值也為3。這兩個節點在樹中可能是不同的節點，但是值相同。要對節點A進行修改，將其值改為6，然後再進行中序遍歷：</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; 5<br />\r\n&nbsp;&nbsp; / \\<br />\r\n&nbsp; 6&nbsp;&nbsp; 8<br />\r\n&nbsp;/ \\ / \\<br />\r\n2&nbsp; 4 7&nbsp; 9</p>\r\n\r\n<p>修改節點A後的樹 =&gt; 2, 4, 5, 6, 7, 8, 9</p>\r\n\r\n<p>節點B的值仍然是3，而節點A的值變成了6。這說明在中序中，節點的相對順序保持不變。節點A的值大於節點B的值，那麼在中序遍歷中，節點A的值仍然會在節點B的值後面。因此，中序遍歷二元搜尋樹的過程中，相同值的節點之間的相對順序是穩定的。這就是中序遍歷二元搜尋樹的穩定排序性質。</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "28",
        "lang": "1"
    }
}
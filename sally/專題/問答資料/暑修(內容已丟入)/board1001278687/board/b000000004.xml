<?xml version="1.0"?>
<data version="3.0" time="2024-07-20 09:55:52" type="post" filename="b000000004.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001278687</board_id>
  <node>000000004</node>
  <site>1000110001</site>
  <pt>2023-07-22 13:46:46</pt>
  <poster>06005635</poster>
  <realname>&#x9EC3;&#x535A;&#x5143;  </realname>
  <email>maruko1mjw@yahoo.com.tw</email>
  <homepage>  </homepage>
  <subject>&#x6436;&#x7B54;222 </subject>
  <content>&lt;p&gt;&#x984C;&#x76EE; :&amp;nbsp;&#x64B0;&#x5BEB;&#x7A0B;&#x5F0F;&#x78BC;&#x6307;&#x51FA;&#x5982;&#x4F55;&#x70BA;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x65B0;&#x589E;&#x7BC0;&#x9EDE;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x56DE;&#x7B54; :&amp;nbsp;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x7576;&#x8981;&#x5728;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x4E2D;&#x65B0;&#x589E;&#x7BC0;&#x9EDE;&#x6642;&#xFF0C;&#x9700;&#x8981;&#x8003;&#x616E;&#x4EE5;&#x4E0B;&#x6B65;&#x9A5F;&#xFF1A;&lt;/p&gt;&#xD;
&#xD;
&lt;ol&gt;&#xD;
	&lt;li&gt;&#x82E5;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x70BA;&#x7A7A;&#xFF0C;&#x5247;&#x76F4;&#x63A5;&#x5EFA;&#x7ACB;&#x65B0;&#x7BC0;&#x9EDE;&#x4F5C;&#x70BA;&#x6839;&#x7BC0;&#x9EDE;&#x3002;&lt;/li&gt;&#xD;
	&lt;li&gt;&#x82E5;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x4E0D;&#x70BA;&#x7A7A;&#xFF0C;&#x5247;&#x5F9E;&#x6839;&#x7BC0;&#x9EDE;&#x958B;&#x59CB;&#xFF0C;&#x6BD4;&#x8F03;&#x8981;&#x65B0;&#x589E;&#x7684;&#x503C;&#x8207;&#x76EE;&#x524D;&#x7BC0;&#x9EDE;&#x7684;&#x503C;&#x5927;&#x5C0F;&#x95DC;&#x4FC2;&#x3002; a. &#x82E5;&#x8981;&#x65B0;&#x589E;&#x7684;&#x503C;&#x6BD4;&#x76EE;&#x524D;&#x7BC0;&#x9EDE;&#x7684;&#x503C;&#x5C0F;&#xFF0C;&#x5247;&#x5F80;&#x5DE6;&#x5B50;&#x6A39;&#x905E;&#x8FF4;&#x65B0;&#x589E;&#x3002; b. &#x82E5;&#x8981;&#x65B0;&#x589E;&#x7684;&#x503C;&#x6BD4;&#x76EE;&#x524D;&#x7BC0;&#x9EDE;&#x7684;&#x503C;&#x5927;&#xFF0C;&#x5247;&#x5F80;&#x53F3;&#x5B50;&#x6A39;&#x905E;&#x8FF4;&#x65B0;&#x589E;&#x3002;&lt;/li&gt;&#xD;
	&lt;li&gt;&#x91CD;&#x8907;&#x6B65;&#x9A5F; 2 &#x76F4;&#x5230;&#x627E;&#x5230;&#x9069;&#x7576;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E26;&#x5728;&#x8A72;&#x4F4D;&#x7F6E;&#x5EFA;&#x7ACB;&#x65B0;&#x7BC0;&#x9EDE;&#x3002;&lt;/li&gt;&#xD;
&lt;/ol&gt;&#xD;
&#xD;
&lt;p&gt;&#x4EE5;&#x4E0B;&#x662F;&#x7528; C++ &#x64B0;&#x5BEB;&#x7684;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x65B0;&#x589E;&#x7BC0;&#x9EDE;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#x793A;&#x4F8B;&#xFF1A;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;#include &amp;lt;iostream&amp;gt;&lt;br /&gt;&#xD;
using namespace std;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x5B9A;&#x7FA9;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x7684;&#x7BC0;&#x9EDE;&#x7D50;&#x69CB;&lt;br /&gt;&#xD;
struct Node {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; int data;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; Node* left;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; Node* right;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; Node(int value) : data(value), left(nullptr), right(nullptr) {}&lt;br /&gt;&#xD;
};&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x51FD;&#x5F0F;&#xFF1A;&#x65B0;&#x589E;&#x7BC0;&#x9EDE;&#x5230;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&lt;br /&gt;&#xD;
Node* insertNode(Node* root, int value) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; // &#x82E5;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x70BA;&#x7A7A;&#xFF0C;&#x5247;&#x5EFA;&#x7ACB;&#x65B0;&#x7BC0;&#x9EDE;&#x4F5C;&#x70BA;&#x6839;&#x7BC0;&#x9EDE;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; if (root == nullptr) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; root = new Node(value);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return root;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; // &#x905E;&#x8FF4;&#x5730;&#x5C0B;&#x627E;&#x9069;&#x7576;&#x7684;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x65B0;&#x7BC0;&#x9EDE;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; if (value &amp;lt; root-&amp;gt;data) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; root-&amp;gt;left = insertNode(root-&amp;gt;left, value);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; else if (value &amp;gt; root-&amp;gt;data) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; root-&amp;gt;right = insertNode(root-&amp;gt;right, value);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return root;&lt;br /&gt;&#xD;
}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// &#x8F14;&#x52A9;&#x51FD;&#x5F0F;&#xFF1A;&#x5370;&#x51FA;&#x4E2D;&#x5E8F;&#x904D;&#x6B77;&#x7D50;&#x679C;&#xFF08;&#x7528;&#x65BC;&#x78BA;&#x8A8D;&#x6A39;&#x7684;&#x7D50;&#x69CB;&#x662F;&#x5426;&#x6B63;&#x78BA;&#xFF09;&lt;br /&gt;&#xD;
void inorderTraversal(Node* root) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; if (root != nullptr) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inorderTraversal(root-&amp;gt;left);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; root-&amp;gt;data &amp;lt;&amp;lt; &amp;quot; &amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inorderTraversal(root-&amp;gt;right);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int main() {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; Node* root = nullptr;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; // &#x5728;&#x4E8C;&#x5143;&#x641C;&#x5C0B;&#x6A39;&#x4E2D;&#x65B0;&#x589E;&#x7BC0;&#x9EDE;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 5);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 3);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 8);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 1);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 4);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 7);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; root = insertNode(root, 9);&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; // &#x4E2D;&#x5E8F;&#x904D;&#x6B77;&#x6A39;&#x7684;&#x7BC0;&#x9EDE;&#xFF0C;&#x5370;&#x51FA;&#x7D50;&#x679C;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot;&#x4E2D;&#x5E8F;&#x904D;&#x6B77;&#x7D50;&#x679C;&#xFF1A;&amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; inorderTraversal(root);&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; endl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;br /&gt;&#xD;
}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x57F7;&#x884C;&#x7D50;&#x679C; :&amp;nbsp;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&lt;img alt="" src="/user/0/6/06005635/images/222.png" style="height:228px; width:552px" /&gt;&lt;/p&gt; </content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>15</hit>
  <lang>1</lang>
</data>

<?xml version="1.0"?>
<data version="3.0" time="2024-07-20 09:55:26" type="post" filename="b000000002.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001278683</board_id>
  <node>000000002</node>
  <site>1000110001</site>
  <pt>2023-07-19 13:49:16</pt>
  <poster>06005636</poster>
  <realname>&#x6731;&#x7D18;&#x6B63;  </realname>
  <email>henry3446@gmail.com</email>
  <homepage>  </homepage>
  <subject>&#x6436;&#x7B54;206 </subject>
  <content>&lt;p&gt;206. &#x64B0;&#x5BEB;&#x7A0B;&#x5F0F;&#x78BC;&#x8AAA;&#x660E;&#x6C23;&#x6CE1;&#x6392;&#x5E8F;bubble sort&#x5982;&#x4F55;&#x63D0;&#x65E9;&#x7D50;&#x675F;&#x57F7;&#x884C;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x8981;&#x5BE6;&#x73FE;&#x6C23;&#x6CE1;&#x6392;&#x5E8F;&#x4E26;&#x63D0;&#x65E9;&#x7D50;&#x675F;&#x57F7;&#x884C;&#x6642;&#xFF0C;&#x56BC;&#x689D;&#x4EF6;&#x662F;&#x5E8F;&#x5217;&#x5DF2;&#x7D93;&#x5B8C;&#x6210;&#x6392;&#x5E8F;&#xFF0C;&#x6C92;&#x6709;&#x767C;&#x751F;&#x4EFB;&#x4F55;&#x5143;&#x7D20;&#x7684;&#x4EA4;&#x63DB;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x63D0;&#x65E9;&#x7D50;&#x675F;&#x6392;&#x5E8F;&#x904E;&#x7A0B;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;#include &amp;lt;iostream&amp;gt;&lt;br /&gt;&#xD;
using namespace std;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void bubbleSort(int arr[], int n) {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; n; i++) {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x63D0;&#x65E9;&#x7D50;&#x675F;&#x7684;&#x6A19;&#x8A8C;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bool isSorted = true;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int j = 0; j &amp;lt; n - i - 1; j++) {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (arr[j] &amp;gt; arr[j + 1]) {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x4EA4;&#x63DB;&#x5143;&#x7D20;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; swap(arr[j], arr[j + 1]);&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSorted = false;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // &#x5982;&#x679C;&#x4E00;&#x6B21;&#x904D;&#x6B77;&#x4E2D;&#x6C92;&#x6709;&#x767C;&#x751F;&#x4EA4;&#x63DB;&#xFF0C;&#x8868;&#x793A;&#x5E8F;&#x5217;&#x5DF2;&#x7D93;&#x5B8C;&#x6210;&#x6392;&#x5E8F;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isSorted) {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&#xD;
}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int main() {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; int arr[] = {64, 34, 25, 12, 22, 11, 90};&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; int n = sizeof(arr) / sizeof(arr[0]);&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bubbleSort(arr, n);&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot;Sorted array: &amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; n; i++) {&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp; cout &amp;lt;&amp;lt; endl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 0;&lt;br /&gt;&#xD;
}&lt;/p&gt; </content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>27</hit>
  <lang>1</lang>
</data>

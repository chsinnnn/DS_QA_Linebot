{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:54:52",
        "@type": "post",
        "@filename": "b000000002.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278678",
        "node": "000000002",
        "site": "1000110001",
        "pt": "2023-07-07 02:16:41",
        "poster": "06005636",
        "realname": "朱紘正",
        "email": "henry3446@gmail.com",
        "homepage": null,
        "subject": "搶答111",
        "content": "<p>111. 傳入陣列A和整數S，寫出C++函數從A找三個數字加總為S的組合。</p>\r\n\r\n<p>//本程式<span style=\"font-family:新細明體,serif\">收到一個整數陣列</span> A <span style=\"font-family:新細明體,serif\">和一個整數</span> S<span style=\"font-family:新細明體,serif\">，然後找出陣列</span> A <span style=\"font-family:新細明體,serif\">中的三個數，使它們的和等於</span> S</p>\r\n\r\n<p>#include &lt;iostream&gt;<br />\r\n#include &lt;vector&gt;<br />\r\n#include &lt;algorithm&gt;</p>\r\n\r\n<p>using namespace std;</p>\r\n\r\n<p>vector&lt;vector&lt;int&gt;&gt; findCombination(vector&lt;int&gt;&amp; A, int S) {<br />\r\n&nbsp;&nbsp;&nbsp; vector&lt;vector&lt;int&gt;&gt; result;<br />\r\n&nbsp;&nbsp;&nbsp; int n = A.size();<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; sort(A.begin(), A.end());&nbsp; // <span style=\"font-family:新細明體,serif\">排序陣列</span> A<span style=\"font-family:新細明體,serif\">，以便在後續查找中使用雙指針法</span><br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; n - 2; i++) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i &gt; 0 &amp;&amp; A[i] == A[i - 1])<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;&nbsp; //<span style=\"font-size:12px\"> <span style=\"font-family:&quot;新細明體&quot;,serif\">避免重複的組合</span></span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int left = i + 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int right = n - 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (left &lt; right) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int sum = A[i] + A[left] + A[right];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (sum == S) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.push_back({A[i], A[left], A[right]});<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left++;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right--;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (left &lt; right &amp;&amp; A[left] == A[left - 1])<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left++;&nbsp; // <span style=\"font-size:12px\"><span style=\"font-family:&quot;新細明體&quot;,serif\">避免重複的組合</span></span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (left &lt; right &amp;&amp; A[right] == A[right + 1])<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right--;&nbsp; //<span style=\"font-size:12px\"><span style=\"font-family:&quot;新細明體&quot;,serif\"> 避免重複的組合</span></span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (sum &lt; S) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left++;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right--;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; return result;<br />\r\n}</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp;&nbsp;&nbsp; vector&lt;int&gt; A = {1, 2, 3, 4, 5, 6, 7, 8, 9};<br />\r\n&nbsp;&nbsp;&nbsp; int S = 15;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; vector&lt;vector&lt;int&gt;&gt; combinations = findCombination(A, S);<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; if (combinations.empty()) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;No combination found.&quot; &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; } else {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Combinations found:&quot; &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (const auto&amp; combination : combinations) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; combination[0] &lt;&lt; &quot; + &quot; &lt;&lt; combination[1] &lt;&lt; &quot; + &quot; &lt;&lt; combination[2] &lt;&lt; &quot; = &quot; &lt;&lt; S &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; return 0;<br />\r\n}</p>\r\n\r\n<p>1. 為何要排序？</p>\r\n\r\n<p>排序是為了在後續查找中使用雙指針法，我們需要找到陣列 A 中的三個數字加總為 S 的組合。排序後，我們可以使用兩個指針（left 和 right）來進行查找，從而有效地避免重複計算和處理。</p>\r\n\r\n<p>2. 如何改寫成遞迴？</p>\r\n\r\n<p>若要改寫成遞迴，可以將函數改為遞迴形式，其中遞迴的終止條件是找到三個數字加總為 S 的組合或者陣列 A 中的數字不足三個。</p>\r\n\r\n<p>vector&lt;vector&lt;int&gt;&gt; findCombination(vector&lt;int&gt;&amp; A, int S, int startIndex, int count) {<br />\r\n&nbsp;&nbsp;&nbsp; vector&lt;vector&lt;int&gt;&gt; result;<br />\r\n&nbsp;&nbsp;&nbsp; if (count == 3) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (S == 0) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.push_back({});<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; int n = A.size();<br />\r\n&nbsp;&nbsp;&nbsp; for (int i = startIndex; i &lt; n; i++) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i &gt; startIndex &amp;&amp; A[i] == A[i - 1]) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;&nbsp; // 避免重複的組合<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (A[i] &gt; S) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;&nbsp; // A 已排序，後續數字皆大於 S，不可能有組合<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int num = A[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector&lt;vector&lt;int&gt;&gt; subCombinations = findCombination(A, S - num, i + 1, count + 1);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (auto&amp; combination : subCombinations) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; combination.insert(combination.begin(), num);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.push_back(combination);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; return result;<br />\r\n}</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp;&nbsp;&nbsp; vector&lt;int&gt; A = {1, 2, 3, 4, 5, 6, 7, 8, 9};<br />\r\n&nbsp;&nbsp;&nbsp; int S = 15;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; vector&lt;vector&lt;int&gt;&gt; combinations = findCombination(A, S, 0, 0);<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; if (combinations.empty()) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;No combination found.&quot; &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; } else {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Combinations found:&quot; &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (const auto&amp; combination : combinations) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; combination[0] &lt;&lt; &quot; + &quot; &lt;&lt; combination[1] &lt;&lt; &quot; + &quot; &lt;&lt; combination[2] &lt;&lt; &quot; = &quot; &lt;&lt; S &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; return 0;<br />\r\n}</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "38",
        "lang": "1"
    }
}
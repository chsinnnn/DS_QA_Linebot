<?xml version="1.0"?>
<data version="3.0" time="2024-07-20 09:55:26" type="post" filename="b000000013.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001278683</board_id>
  <node>000000013</node>
  <site>1000110001</site>
  <pt>2023-07-22 16:05:39</pt>
  <poster>10924326</poster>
  <realname>&#x5433;&#x82F1;&#x777F;  </realname>
  <email>incaray901228@gmail.com</email>
  <homepage>  </homepage>
  <subject>&#x6436;&#x7B54;210 </subject>
  <content>&lt;p&gt;&#x554F;&#x984C;&#xFF1A;&#x4F9D;&#x64DA;&#x7A0B;&#x5F0F;&#x78BC;&#x89E3;&#x8AAA;&#x9078;&#x64C7;&#x6392;&#x5E8F;&#x7684;&#x6642;&#x9593;&#x8907;&#x96DC;&#x5EA6;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x4EE5;&#x4E0B;&#x662F;&#x9078;&#x64C7;&#x6392;&#x5E8F;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;void selectionSort(int arr[], int n) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; for (int i = 0; i &amp;lt; n - 1; i++) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int min_idx = i;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (int j = i + 1; j &amp;lt; n; j++) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (arr[j] &amp;lt; arr[min_idx]) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; min_idx = j;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Swap the minimum element with the first unsorted element&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int temp = arr[i];&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; arr[i] = arr[min_idx];&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; arr[min_idx] = temp;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
}&lt;br /&gt;&#xD;
&amp;nbsp;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;1.&#x5F9E;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x958B;&#x59CB;&#xFF0C;&#x5C07;&#x5176;&#x8996;&#x70BA;&#x5DF2;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;2.&#x5728;&#x672A;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#x4E2D;&#x627E;&#x5230;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4E26;&#x5C07;&#x5176;&#x8207;&#x5DF2;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#x7684;&#x672B;&#x5C3E;&#x9032;&#x884C;&#x4EA4;&#x63DB;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;3.&#x7136;&#x5F8C;&#x5C07;&#x4E0B;&#x4E00;&#x500B;&#x672A;&#x6392;&#x5E8F;&#x5143;&#x7D20;&#x8996;&#x70BA;&#x5DF2;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#xFF0C;&#x91CD;&#x8907;&#x6B65;&#x9A5F;2&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x6392;&#x5E8F;&#x5B8C;&#x7562;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x9078;&#x64C7;&#x6392;&#x5E8F;&#x5305;&#x542B;&#x5169;&#x500B;&#x5D4C;&#x5957;&#x7684;&#x5FAA;&#x74B0;&#x3002;&#x5916;&#x5C64;&#x5FAA;&#x74B0;&#x904D;&#x6B77;n-1&#x6B21;&#xFF08;0&#x5230;n-2&#xFF0C;&#x5171;n-1&#x500B;&#x5143;&#x7D20;&#xFF09;&#xFF0C;&#x5167;&#x5C64;&#x5FAA;&#x74B0;&#x904D;&#x6B77;&#x5269;&#x9918;&#x672A;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#x627E;&#x5230;&#x6700;&#x5C0F;&#x503C;&#x3002;&#x5167;&#x5C64;&#x5FAA;&#x74B0;&#x6BCF;&#x6B21;&#x904D;&#x6B77;&#x5269;&#x9918;&#x672A;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x5176;&#x904B;&#x884C;&#x6B21;&#x6578;&#x70BA;n-1&#x3001;n-2&#x3001;...&#xFF0C;&#x76F4;&#x5230;1&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x7E3D;&#x7684;&#x904B;&#x884C;&#x6B21;&#x6578;&#x70BA;(n-1) + (n-2) + ... + 1&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x6839;&#x64DA;&#x6578;&#x5B78;&#x516C;&#x5F0F;(n-1) + (n-2) + ... + 1 = n * (n-1) / 2&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x9078;&#x64C7;&#x6392;&#x5E8F;&#x7684;&#x6642;&#x9593;&#x8907;&#x96DC;&#x5EA6;&#x70BA;O(n^2)&#x3002;&lt;/p&gt; </content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>14</hit>
  <lang>1</lang>
</data>

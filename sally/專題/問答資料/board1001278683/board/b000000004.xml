<?xml version="1.0"?>
<data version="3.0" time="2024-07-20 09:55:26" type="post" filename="b000000004.xml">
  <open_time>0000-00-00</open_time>
  <close_time>0000-00-00</close_time>
  <lang_name>Big5</lang_name>
  <board_id>1001278683</board_id>
  <node>000000004</node>
  <site>1000110001</site>
  <pt>2023-07-19 15:03:36</pt>
  <poster>06005635</poster>
  <realname>&#x9EC3;&#x535A;&#x5143;  </realname>
  <email>maruko1mjw@yahoo.com.tw</email>
  <homepage> </homepage>
  <subject>&#x6436;&#x7B54;209 </subject>
  <content>&lt;p&gt;&#x64B0;&#x5BEB;&#x7A0B;&#x5F0F;&#x78BC;&#x6307;&#x51FA;&#x5F71;&#x97FF;&#x63D2;&#x5165;&#x6392;&#x5E8F;insertion sort&#x662F;&#x5426;&#x7A69;&#x5B9A;stable&#x7684;&#x95DC;&#x9375;&#x6307;&#x4EE4;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;#include &amp;lt;iostream&amp;gt;&lt;br /&gt;&#xD;
#include &amp;lt;vector&amp;gt;&lt;br /&gt;&#xD;
#include&amp;lt;string&amp;gt;&lt;br /&gt;&#xD;
using namespace std;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;// Insertion Sort function&lt;br /&gt;&#xD;
void insertionSort(vector&amp;lt;pair&amp;lt;int, char&amp;gt;&amp;gt;&amp;amp; arr) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; int n = arr.size();&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; for (int i = 1; i &amp;lt; n; ++i) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pair&amp;lt;int, char&amp;gt; key = arr[i];&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int j = i - 1;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Shift elements greater than key to the right&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while (j &amp;gt;= 0 &amp;amp;&amp;amp; key.first &amp;lt; arr[j].first) { // Use &amp;quot;&amp;lt;&amp;quot; for stable sort&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; arr[j + 1] = arr[j];&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; j--;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; arr[j + 1] = key;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;int main() {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; vector&amp;lt;pair&amp;lt;int, char&amp;gt;&amp;gt; arr = { {3, &amp;#39;c&amp;#39;}, {1, &amp;#39;a&amp;#39;}, {2, &amp;#39;b&amp;#39;}, {3, &amp;#39;d&amp;#39;} };&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot;&#x539F;&#x59CB;&#x5E8F;&#x5217;&#xFF1A;&amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; for (int i = 0; i &amp;lt; size(arr);i++) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot;(&amp;quot; &amp;lt;&amp;lt; arr[i].first &amp;lt;&amp;lt; &amp;quot;, &amp;quot; &amp;lt;&amp;lt; arr[i].second &amp;lt;&amp;lt; &amp;quot;) &amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; endl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; insertionSort(arr);&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot;&#x6392;&#x5E8F;&#x5F8C;&#xFF1A;&amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; for (int i = 0; i &amp;lt; size(arr); i++) {&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; &amp;quot;(&amp;quot; &amp;lt;&amp;lt; arr[i].first &amp;lt;&amp;lt; &amp;quot;, &amp;quot; &amp;lt;&amp;lt; arr[i].second &amp;lt;&amp;lt; &amp;quot;) &amp;quot;;&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&#xD;
&amp;nbsp; &amp;nbsp; cout &amp;lt;&amp;lt; endl;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;br /&gt;&#xD;
}&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x5728;&#x9019;&#x500B; C++ &#x7A0B;&#x5F0F;&#x78BC;&#x4E2D;&#xFF0C;&#x6211;&#x5011;&#x4F7F;&#x7528; vector &#x4F86;&#x5132;&#x5B58;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x6BCF;&#x500B;&#x5143;&#x7D20;&#x662F;&#x4E00;&#x500B; pair&#xFF0C;&#x5176;&#x4E2D;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x662F;&#x6392;&#x5E8F;&#x7684;&#x95DC;&#x9375;&#x5B57;&#xFF0C;&#x7B2C;&#x4E8C;&#x500B;&#x5143;&#x7D20;&#x662F;&#x6A19;&#x7C64;&#x3002;&#x9019;&#x6A23;&#x53EF;&#x4EE5;&#x6A21;&#x64EC;&#x591A;&#x500B;&#x76F8;&#x7B49;&#x5143;&#x7D20;&#x7684;&#x60C5;&#x6CC1;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x5728; insertionSort &#x51FD;&#x5F0F;&#x4E2D;&#xFF0C;&#x6211;&#x5011;&#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x4F86;&#x5C0D; vector &#x4E2D;&#x7684;&#x5143;&#x7D20;&#x9032;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x5728; while &#x8FF4;&#x5708;&#x4E2D;&#xFF0C;&#x6211;&#x5011;&#x4F7F;&#x7528; &amp;lt; &#x4F86;&#x6BD4;&#x8F03;&#x95DC;&#x9375;&#x5B57;&#xFF0C;&#x9019;&#x4FDD;&#x8B49;&#x4E86;&#x6392;&#x5E8F;&#x7684;&#x7A69;&#x5B9A;&#x6027;&#xFF0C;&#x5373;&#x76F8;&#x7B49;&#x5143;&#x7D20;&#x7684;&#x76F8;&#x5C0D;&#x9806;&#x5E8F;&#x5728;&#x6392;&#x5E8F;&#x5F8C;&#x4FDD;&#x6301;&#x4E0D;&#x8B8A;&#x3002;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x57F7;&#x884C;&#x9019;&#x500B;&#x7A0B;&#x5F0F;&#x78BC;&#xFF0C;&#x8F38;&#x51FA;&#x7D50;&#x679C;&#x61C9;&#x70BA;&#xFF1A;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&lt;img alt="" src="/user/0/6/06005635/images/%E6%90%B6%E7%AD%94209%281%29.png" style="height:168px; width:995px" /&gt;&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;&#x9019;&#x8B49;&#x660E;&#x4E86;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x662F;&#x7A69;&#x5B9A;&#x7684;&#xFF0C;&#x76F8;&#x7B49;&#x5143;&#x7D20;&#x7684;&#x76F8;&#x5C0D;&#x9806;&#x5E8F;&#x5728;&#x6392;&#x5E8F;&#x5F8C;&#x5F97;&#x5230;&#x4E86;&#x4FDD;&#x7559;&#x3002;&lt;/p&gt;</content>
  <attach></attach>
  <rcount></rcount>
  <rank></rank>
  <hit>19</hit>
  <lang>1</lang>
</data>

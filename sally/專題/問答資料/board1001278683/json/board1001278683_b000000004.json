{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:26",
        "@type": "post",
        "@filename": "b000000004.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278683",
        "node": "000000004",
        "site": "1000110001",
        "pt": "2023-07-19 15:03:36",
        "poster": "06005635",
        "realname": "黃博元",
        "email": "maruko1mjw@yahoo.com.tw",
        "homepage": null,
        "subject": "搶答209",
        "content": "<p>撰寫程式碼指出影響插入排序insertion sort是否穩定stable的關鍵指令。</p>\r\n\r\n<p>#include &lt;iostream&gt;<br />\r\n#include &lt;vector&gt;<br />\r\n#include&lt;string&gt;<br />\r\nusing namespace std;</p>\r\n\r\n<p>// Insertion Sort function<br />\r\nvoid insertionSort(vector&lt;pair&lt;int, char&gt;&gt;&amp; arr) {<br />\r\n&nbsp; &nbsp; int n = arr.size();<br />\r\n&nbsp; &nbsp; for (int i = 1; i &lt; n; ++i) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; pair&lt;int, char&gt; key = arr[i];<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; int j = i - 1;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; // Shift elements greater than key to the right<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; while (j &gt;= 0 &amp;&amp; key.first &lt; arr[j].first) { // Use &quot;&lt;&quot; for stable sort<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; arr[j + 1] = arr[j];<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j--;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; arr[j + 1] = key;<br />\r\n&nbsp; &nbsp; }<br />\r\n}</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp; &nbsp; vector&lt;pair&lt;int, char&gt;&gt; arr = { {3, &#39;c&#39;}, {1, &#39;a&#39;}, {2, &#39;b&#39;}, {3, &#39;d&#39;} };<br />\r\n&nbsp; &nbsp; cout &lt;&lt; &quot;原始序列：&quot;;<br />\r\n&nbsp; &nbsp; for (int i = 0; i &lt; size(arr);i++) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; &quot;(&quot; &lt;&lt; arr[i].first &lt;&lt; &quot;, &quot; &lt;&lt; arr[i].second &lt;&lt; &quot;) &quot;;<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; cout &lt;&lt; endl;</p>\r\n\r\n<p>&nbsp; &nbsp; insertionSort(arr);</p>\r\n\r\n<p>&nbsp; &nbsp; cout &lt;&lt; &quot;排序後：&quot;;<br />\r\n&nbsp; &nbsp; for (int i = 0; i &lt; size(arr); i++) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; &quot;(&quot; &lt;&lt; arr[i].first &lt;&lt; &quot;, &quot; &lt;&lt; arr[i].second &lt;&lt; &quot;) &quot;;<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; cout &lt;&lt; endl;</p>\r\n\r\n<p>&nbsp; &nbsp; return 0;<br />\r\n}</p>\r\n\r\n<p>在這個 C++ 程式碼中，我們使用 vector 來儲存要排序的元素，每個元素是一個 pair，其中第一個元素是排序的關鍵字，第二個元素是標籤。這樣可以模擬多個相等元素的情況。</p>\r\n\r\n<p>在 insertionSort 函式中，我們使用插入排序來對 vector 中的元素進行排序。在 while 迴圈中，我們使用 &lt; 來比較關鍵字，這保證了排序的穩定性，即相等元素的相對順序在排序後保持不變。</p>\r\n\r\n<p>執行這個程式碼，輸出結果應為：</p>\r\n\r\n<p><img alt=\"\" src=\"/user/0/6/06005635/images/%E6%90%B6%E7%AD%94209%281%29.png\" style=\"height:168px; width:995px\" /></p>\r\n\r\n<p>這證明了插入排序是穩定的，相等元素的相對順序在排序後得到了保留。</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "19",
        "lang": "1"
    }
}
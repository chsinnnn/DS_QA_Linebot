[
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 一層括弧 ()()()\n\n二層括弧 ( () () )、( () ) ()、() ( () )\n\n三層括弧( ( () ) )\n\n總共5組",
        "output": "同樣的問題如果有四組括弧呢？是否有通用的規則可以推算？"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: call by reference : 呼叫function以後主程式的值會被改變，且記憶體位置相同。\n\ncall by value : 主副程式的變數記憶體位置不同，且呼叫function後不影響原值。\n\ncall by address : 呼叫function以後主程式的值會被改變，但function中變數的記憶體位置仍不同。",
        "output": "講解得很清楚，還跟之前的問題做比較，讚讚 OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 合法的形式有5種，\n\n  單層 : ()()()\n\n  雙層 : (())()、()(())、(()())\n\n  三層 : ((()))\n\n不合法的情況有15種，會出現括號不成對的情況。\n\n僅一個成對 : ()))((、))((()、))()((、))(()(、)())((\n\n兩個成對 :\n\n  單層 : ())(()、())()(、)()(()、)()()(、()())(、)(()()\n\n  雙層 : )(())(、(()))(、)((())\n\n都不成對 :  )))(((",
        "output": "太厲害了吧!! Great!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 以Linkedlist裡只有一個num值為例進行複製\n\n以linklist A 複製到 linklist B 並印出檢查，兩者的輸出相同，即表示複製成功",
        "output": "要設法避免連續二次鏈結以上如 head-&gt;next-&gt;next 形式的程式碼，程式可讀性差、常因illeagal access出錯、而且不易除錯。"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 共有五種!\n\n分別是\n\n括弧裡面沒有括弧了 ()()() 一種\n\n括弧裡面還有括弧 ( () () )﹐( () ) ()﹐() ( () ) 三種\n\n括弧裡面的括弧裡面還有括弧( ( () ) ) 一種",
        "output": "講得真好！ 講得真詳細!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 先假設有一鏈結串列裡的值依序是10,20,30。宣告另一個鏈結串列來複製值。\n\n若依序印出的值與初始相同代表複製成功",
        "output": "題目沒有限制任何長度的鏈結串列，解答的程式碼就要能應付各種長度，包括0。"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 以下是我自己寫得程式範例，解釋在程式的下方\n\n\n\nCall by reference是 C++才有的，call by reference 和 call by address的差別主要在於後者的指標它的內容為指向的位置，所以他本身仍然有記憶體位置但是前者是不會有的。因此參數在被函式呼叫之後，主程式的值會受到函式的影響，以及函式和主程式所使用的參數的記憶體位置是相同的。",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 總共有三種類型\n\n()()() 單一的括弧\n\n((())) 三層的括弧\n\n(())(), ()(()), (()()) 兩層的括弧\n\n總共五種\n\n若想要再知道3組以上的括弧有幾種形式，可透過backtracking的方式寫出一支程式找出其合法的形式。",
        "output": "講得真好 還有利用到上課影片的內容 講的很好！ 透過backtracking的方式寫出一支程式找出其合法的形式。 \n\n可否直接描述？ 讚!"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 總共有五種不同形式\n\n1.()()() \n\n2.((())) \n\n3.(())()\n\n4.()(())\n\n5.(()())",
        "output": "簡單明瞭！ 貼文之前要看看前面的貼文，毫無新意的內容是得不到額外加分的。"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: ",
        "output": "好詳細，讚！ 好清楚！真棒"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 以下為程式碼\n\ncall by reference: 把所要引用的位置複製給function的參數，兩者的地址是相同的，因此對function裡的x的改變其實就是對main中的x的改變，因此function的執行會影響到main裡面的數值。\n\n以下是執行結果，在呼叫function之後，main的值會受到影響，但main和function所使用的參數的記憶體位置是相同的。",
        "output": "講得真好！！"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 環狀鏈結串列的特色\n\n是將單向連接串列最後一個節點指向串列的第一個節點，而非像單向鏈結串列指向null，且不論從哪個節點開始讀取，都能經過節點，所以怎麼前進都會循環。 \n\n小時候的玩的團康遊戲鬼抓人，大家會圍成一個圓圈，先選一個人當鬼，會在圓圈外圍環遶尋找下手的目標，假設這個鬼拍了你的背一下，你就要趕快站起來追他。如果追到他，他就繼續當鬼 ; 如果讓鬼跑一圈，搶坐在你原本的位置上，那就要換你當鬼，且過程一定會經過所有人。",
        "output": ""
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 如題。\n到目前為止，共計53位同學問答已得分。",
        "output": ""
    }
]
{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:59:51",
        "@type": "post",
        "@filename": "b000000003.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001174276",
        "node": "000000003",
        "site": "1000110001",
        "pt": "2022-10-23 23:28:34",
        "poster": "10920119",
        "realname": "陳彥丞",
        "email": "brian33550706@gmail.com",
        "homepage": null,
        "subject": "129. 寫C++程式碼設計遞迴函數產生3個數字不同且加總等於M的所有3位數，M是輸入的整數，百位數必須非零。",
        "content": "<p>若想產生3個數字不同且加總等於M的所有3位數，且百位數必須非0，則這三個數字必皆為個位數。</p>\r\n\r\n<p>=&gt; 必須注意最大的M是24 = 9 + 8 +&nbsp;7，而最小的M是3&nbsp;= 2&nbsp;+ 1&nbsp;+ 0。</p>\r\n\r\n<p>總共填3次，第一次填1~limit，第二次填0~limit(若第一次填的數字在內，需跳過其)，第三次只填一個(M減掉前兩次填的數字)。</p>\r\n\r\n<p>limit是填入後不會使後面的數字填不了的最大數字，如M = 9時，limit = 8，因為8後面尚可填1&amp;0；或是如M = 9且第一個數是7時，limit = 2，因為7、2後面尚可填0。</p>\r\n\r\n<p>以下是程式碼：</p>\r\n\r\n<p>#include &lt;iostream&gt;<br />\r\n#include &lt;vector&gt;<br />\r\n#include &lt;algorithm&gt;<br />\r\nusing namespace std ;</p>\r\n\r\n<p>int permuCount = 0 ; &nbsp; &nbsp; &nbsp;// to record the total amounts of permutation in a case.<br />\r\nvector&lt;int&gt; empty ; &nbsp; &nbsp; &nbsp; // an empty array.</p>\r\n\r\n<p>bool isRecur = false ;&nbsp; &nbsp; &nbsp;// indicates if the recurive function is on its first time or recursing.<br />\r\nvoid permuPrinter( vector&lt;int&gt; arr ) ;<br />\r\nvoid allThreeNumSumUpAsM( vector&lt;int&gt;&amp; arr, vector&lt;int&gt;&amp; recur, int target, int currentItem ) ;</p>\r\n\r\n<p>int main() {<br />\r\n&nbsp;&nbsp; &nbsp;int m = 0 ;<br />\r\n&nbsp;&nbsp;&nbsp; &nbsp;vector&lt;int&gt; arr ;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;\\nPlease insert a positive number M: &quot; ;<br />\r\n&nbsp;&nbsp; &nbsp;for( ; m &lt; 1 ; ) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;cin &gt;&gt; m &nbsp;;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if( m &lt; 1 || cin.fail() ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;Invalid input, please try again.\\n&quot; ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cin.clear() ; &nbsp; &nbsp; &nbsp; &nbsp;// if cin failed, reset its flag ( fail: invalid type. &nbsp;e.g. cin &#39;a&#39; to an int variable).<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cin.sync() ; &nbsp; &nbsp; &nbsp; &nbsp; // and clear its temp. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ( without this, next cin will change its flag to fail and stop cin immediately.)<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;\\n\\nResult: \\n&quot; ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;// make arr = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }<br />\r\n&nbsp;&nbsp; &nbsp;arr.clear() ;<br />\r\n&nbsp;&nbsp; &nbsp;for( int first = 0 ; first &lt;= 9 ; first++ ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;arr.push_back(first) ;<br />\r\n&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;empty.resize(3) ; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Rest empty to a n items array full of 0.<br />\r\n&nbsp;&nbsp; &nbsp;permuCount = 0 ;<br />\r\n&nbsp;&nbsp; &nbsp;allThreeNumSumUpAsM( arr, empty, m, 0 ) ;<br />\r\n} // main()</p>\r\n\r\n<p><br />\r\nvoid allThreeNumSumUpAsM( vector&lt;int&gt;&amp; arr, vector&lt;int&gt;&amp; recur, int target, int currentItem ) {<br />\r\n&nbsp;&nbsp; &nbsp;vector&lt; vector&lt;int&gt; &gt; result( 9, vector&lt;int&gt;(3) ) ;<br />\r\n&nbsp;&nbsp; &nbsp;int idxArr = 0 ;<br />\r\n&nbsp;&nbsp; &nbsp;int idx1 = 0 ;<br />\r\n&nbsp;&nbsp; &nbsp;int idx2 = 0 ;<br />\r\n&nbsp;&nbsp; &nbsp;int limit = 9 ;<br />\r\n&nbsp;&nbsp; &nbsp;int addTimes = 9 ;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;// if target is less than 3 or larger than 24, for example = 2, then we wouldn&#39;t be able to find the 3 numbers.&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;if( target &gt;= 3 &amp;&amp; target &lt;= 24 ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if( currentItem == 0 ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;idxArr = 1 ; // result can&#39;t be something like &quot;031&quot; or &quot;049&quot;, so possible number for first are 1~9.<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;while( target - limit &lt;= 0 ) { // e.g. if m = 9, then first number&#39;s max is 8 for &quot;810&quot; and &quot;801&quot;.<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; limit = limit - 1 ;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;} // end of while<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;addTimes = limit - idxArr + 1 ; // first time, possible numbers are from 1&nbsp;to limit.<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;else if( currentItem == 1 ) { // e.g. if m = 9 and first number = 8, then second number&#39;s max is 1 for &quot;810&quot; and &quot;801&quot;.<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;while( target - recur[0] - limit &lt; 0 ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;limit = limit - 1 ;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;} // end of while<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addTimes = limit - idxArr + 1 ; // second&nbsp;time, possible numbers are from 0 to limit, except the first number.<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if( recur[0] &lt;= limit &amp;&amp; recur[0] &gt;= idxArr ) {<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;addTimes = addTimes - 1 ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of else if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;else if( currentItem == 2 ) { // third or the last number will be target - recur[0] - recur[1].<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;idxArr = target - recur[0] - recur[1] ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;limit = target - recur[0] - recur[1] ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if( limit &gt; 9 ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;currentItem = 100 ; // if limit is bigger than 9, then this combination is impossible.<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;addTimes = 1 ; // only 1 possible number for third time.<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of else if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for( idx1 = 0 ; idx1 &lt; addTimes &amp;&amp; currentItem &lt; 3 ; idx1++ ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for( idx2 = 0 ; idx2 &lt; 3 &amp;&amp; isRecur ; idx2++ ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;result[idx1].at(idx2) = recur[idx2] ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for( bool isAdded = false ; idxArr &lt;= limit &amp;&amp; !isAdded ; idxArr++ ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if( find( result[idx1].begin(), result[idx1].end(), arr[idxArr] ) == result[idx1].end() ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;result[idx1].at(currentItem) = arr[idxArr] ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;isAdded = true ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if( currentItem == 3 ) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;for( idx2 = 0 ; idx2 &lt; 3 &amp;&amp; isRecur ; idx2++ ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;result[0].at(idx2) = recur[idx2] ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if( result[0][0] + result[0][1] + result[0][2] == target ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;permuPrinter( result[0] ) ;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;else if( currentItem &lt; 3 ) {<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;isRecur = true ;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for( idx1 = 0 ; idx1 &lt; addTimes ; idx1++ ) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;allThreeNumSumUpAsM( arr, result[idx1], target, currentItem + 1 ) ;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of for<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} // end of else if<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;} // end of if<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;else {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;Unable to find 3 number which sum up as &quot; &lt;&lt; target &lt;&lt; &quot;\\n&quot; ;<br />\r\n&nbsp;&nbsp; &nbsp;} // end of else<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n} // allThreeNumSumUpAsM()</p>\r\n\r\n<p>void permuPrinter( vector&lt;int&gt; arr ) {<br />\r\n&nbsp;&nbsp; &nbsp;permuCount = permuCount + 1 ;<br />\r\n&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;【&quot; &lt;&lt; permuCount &lt;&lt; &quot;】 &quot; ;<br />\r\n&nbsp; &nbsp; for( int idx = 0 ; idx &lt; 3 ; idx++ ) {<br />\r\n&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cout &lt;&lt; arr[idx] &lt;&lt; &quot; &quot; ;<br />\r\n&nbsp; &nbsp; } // end of for<br />\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;\\n&quot; ;<br />\r\n} // permuPriter()</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "32",
        "lang": "1"
    }
}
[
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 208. 撰寫程式碼指出影響氣泡排序是否穩定stable的關鍵指令。\n\n判斷的交換條件：arr[j] &gt; arr[j+1]\n若改為arr[j] &gt;= arr[j+1]則會改變相同數值的順序，unstable\n \n\n#include &lt;iostream&gt;\n\nvoid swap(int &amp;a, int &amp;b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nvoid bubbleSort( int arr[], int n ) {\n  for (int i = 1; i &lt; n; i++) {\n        for (int j = 0; j &lt; n-i; j++) {\n\n            // 關鍵指令，若改為arr[j] &gt;= arr[j+1]則非stable\n            if (arr[j] &gt; arr[j+1]) \n                swap(arr[j], arr[j+1]);\n        }\n    }\n}\n\nvoid printArray(int arr[], int size) {\n    for (int i=0; i &lt; size; i++) {\n        std::cout &lt;&lt; arr[i] &lt;&lt;    ;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90, 12, 25};\n    int n = sizeof(arr) / 4;\n\n    std::cout &lt;&lt;  Unsorted array:  ;\n    printArray(arr, n);\n\n    bubbleSort(arr, n);\n\n    std::cout &lt;&lt;  Sorted array:  ;\n    printArray(arr, n);\n\n    return 0;\n}",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 依據程式碼解說選擇排序的時間複雜度。\n\n選擇排序是在數組中找出極值，以由小到大排序為例，先找出最小的數，放在第一個位置，再找出第二小的數，放在第二個位置，以此類推。\n\n```cpp\n\nvoid selectionSort(int arr[], int n) {\n\n    for (int i = 0; i &lt; n - 1; i++) {\n\n        int min = i;\n\n        for (int j = i + 1; j &lt; n; j++) {\n\n            if (arr[j] &lt; arr[min]) {\n\n                min = j;\n\n            }\n\n        }\n\n        swap(arr[i], arr[min]);\n\n    }\n\n}\n\n```\n\n先假設arr[0]為極值，接著比較n-1次，如果有更小的就把極值換掉，找到極值後把極值放到最前面(交換)\n\n接著以同樣的思路排序 arr[1:n] 、arr[2:n] 、arr[3:n] ...\n\n最後總比較次數為 \n\n\n\n複雜度分析原則(根據複雜度定義)：\n\n1.小常數倍數不計\n\n\n\n2.低次項不計\n\n\n\n3.執行次，總複雜度\n\n比較 O(n-1) 執行 n-1 次，結果仍為原複雜度\n\n因為選擇排序不管初始狀態，比較次數 worst case、best case、average case都一樣，所以比較的複雜度一樣\n\n\n\n而交換的複雜度，最好情況是已排好序，，最差是逆序，要交換 n-1 次，\n\n總複雜度為",
        "output": "Nice."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 207. 舉例解說選擇排序selection sort並非穩定stable的排序方法。\n\n不穩定排序：如果鍵值相同之資料，在排序後相對位置與排序前不相同時，稱不穩定排序。\n\nSelection Sort：遍歷整個陣列，每次選出最小的元素並與陣列的前端交換。交換後逐步縮小需要遍歷的長度，形成陣列前端是已排序的元素；末端是未排序的元素。\n\n若現在有一排數字如 { 6, 7, 5, 4, 6, 3 }，其中有兩個 6 分別在開頭和中間。\n\n當第一次進行選擇排序時，發現 3 是最小的數字，並把 3 和目前排在第一位的 6 交換位置\n\n導致原本排在前面的 6 就被移動到後面。破壞了兩個 6 排序前的相對位置，所以它是不穩定的排序法",
        "output": "Nice example."
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 209.撰寫程式碼指出影響插入排序insertion sort是否穩定stable的關鍵指令。\n\n若比較條件arr[j] &gt; key,如果改成arr[j] &gt;= key則unstable\n\n#include &lt;iostream&gt;\n\n#include &lt;vector&gt;\n\nvoid insertionSort(std::vector&lt;int&gt;&amp; arr) {\n    int n = arr.size();\n    for (int i = 1; i &lt; n; ++i) {\n        int key = arr[i];\n        int j = i - 1;\n\n        // 關鍵指令為arr[j] &gt; key,如果改成arr[j] &gt;= key則unstable\n        while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n            arr[j + 1] = arr[j];\n            --j;\n        }\n\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    std::vector&lt;int&gt; arr = {12, 11, 13, 5, 6};\n\n    std::cout &lt;&lt;  Original array:  ;\n    for (int num : arr) {\n        std::cout &lt;&lt; num &lt;&lt;    ;\n    }\n    \n    insertionSort(arr);\n\n    std::cout &lt;&lt;  \\nSorted array:  ;\n    for (int num : arr) {\n        std::cout &lt;&lt; num &lt;&lt;    ;\n    }\n\n    return 0;\n}",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 我們可以在bubbleSort的loop裡面用一個布林值(變數&#39;swapped&#39;)來追蹤在每一輪的掃描中是否有進行元素的交換。如果一輪掃描結束後swapped仍然是False，表示數列已經排序完成，就可以提前結束整個排序過程。這種就可以避免之後排序已完成卻重複掃描的情況。\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i &lt; n-1; i++) {\n        bool swapped = false;   // 標記是否發生交換或重置狀態\n        for (int j = 0; j &lt; n-i-1; j++) {\n            if (arr[j] &gt; arr[j+1]) {\n                swap(arr[j], arr[j+1]);\n                swapped = true;   // 標記發生交換\n            }\n        }\n        if (!swapped)   // 如果沒有發生交換，則提早結束排序\n            break;\n    }\n}",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 舉例解說選擇排序selection sort並非穩定stable的排序方法。\n\n有一序列如下，由小而大做選擇排序，每次選擇最小者：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\n\t\n\n\n第一次，2與8a交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\n\t\n\n\n第二次，5a與28交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\n\t\n\n\n第三次，5b與14交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\n\t\n\n\n第四次，6與28交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\n\t\n\n\n第五次，8b與自己交換，不變：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\n\t\n\n\n第六次，8a與26交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\n\t\n\n\n第七次，14與26交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\n\t\n\n\n第八次，14與自己交換，不變：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\n\t\n\n\n第九次，26與28交換：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\n\t\n\n\n第十次，28與29交換，完成排序：\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t2\n\t\t\t\n\t\t\t\n\t\t\t5a\n\t\t\t\n\t\t\t\n\t\t\t5b\n\t\t\t\n\t\t\t\n\t\t\t6\n\t\t\t\n\t\t\t\n\t\t\t8b\n\t\t\t\n\t\t\t\n\t\t\t8a\n\t\t\t\n\t\t\t\n\t\t\t14\n\t\t\t\n\t\t\t\n\t\t\t26\n\t\t\t\n\t\t\t\n\t\t\t28\n\t\t\t\n\t\t\t\n\t\t\t29\n\t\t\t\n\t\t\n\t\n\n\n由此可知8a與8b的初始位置與排序後位置不同，因此選擇排序並非一種穩定的排序方法。",
        "output": "OK.\n\n成功舉例之後，可嘗試簡潔地敘述其關鍵理由的邏輯。"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 206. 撰寫程式碼說明氣泡排序bubble sort如何提早結束執行。\nvoid bubbleSort(int A[], int n ){\n\n    bool sorted = False ;\n\n    for(pass = 1; pass &lt;n &amp;&amp; != sorted; ++pass){\n\n        sorted = TRUE;\n\n        for(int index = 0; index &lt; n-pass; index++){\n\n            if(A[index]&gt; A[index+1]){\n\n                swap(A[index], A[index+1]);\n\n                sorted = FALSE;\n\n            }\n\n        }\n\n    }\n\n}\n\n多加一個bool值去判斷是否排好序，只要有一次交換就把bool值改成false。當資料量大時，原時間複雜度O(n2)能變成O(n)。",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 208. 撰寫程式碼指出影響氣泡排序是否穩定stable的關鍵指令。\n\n初始條件: A為須排序的物件串列，n為串列中元素的數量\n\nvoid  swap( int a, int b )  {\n\n  temp = A[a] ;\n\n  A[a] = A[b]\n\n  A[b] = temp ;\n\n} // swap()\n\nfor  (  int  pass  =  1  ;  pass  &lt;  n  ;  pass++  )  {\n\n       for  (  int  index  =  0  ;  index  &lt;  n  -  pass  ;  index++  )  {  \n\n              If  (  A[index]  &gt;  A[index+1]  )  // 此為關鍵指令\n\n                    swap(  index,  index+1 ) ;\n\n        }  //  for() \n\n}  //  for()\n\n  If  (  A[index]  &gt;  A[index+1]  )  為關鍵指令，不用&gt;=而用&gt;，會使得若兩者值相等的時候，並不會進行交換，故原來的順序會被保存。而此時氣泡排序法為stable。",
        "output": "OK"
    },
    {
        "instruction": "請根據以下答案做出評論",
        "input": "題目: \n答案: 得分已達10位同學。",
        "output": ""
    }
]
{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:59:30",
        "@type": "post",
        "@filename": "b000000001.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001174274",
        "node": "000000001",
        "site": "1000110001",
        "pt": "2022-10-08 08:19:32",
        "poster": "11027229",
        "realname": "卓榮暉",
        "email": "intercoursedr@gmail.com",
        "homepage": null,
        "subject": "119. 寫C++程式碼說明刪除鏈結串列linked list第3個節點。",
        "content": "<p>這題主要是刪掉第三個節點<br />\r\n至於怎麼做呢? 就是先取得第二個節點 再讓第二個節點的next設成第四個節點&nbsp;</p>\r\n\r\n<p>#include&lt;bits/stdc++.h&gt; // 這真的是不好的示範 不要亂使用<br />\r\nusing namespace std; // 這也是個非常不好的示範<br />\r\n// Node<br />\r\n// 利用泛型實作<br />\r\ntemplate &lt;typename T&gt;<br />\r\nstruct Node {<br />\r\n&nbsp;&nbsp; &nbsp;T num; // 資料<br />\r\n&nbsp;&nbsp; &nbsp;Node * next;<br />\r\n};</p>\r\n\r\n<p>// 利用泛型實作LinkedList<br />\r\n// 殘缺的LinkedList, 不過可以應付這題<br />\r\ntemplate &lt;typename T&gt;<br />\r\nclass LinkedList {<br />\r\n&nbsp;&nbsp; &nbsp;public:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 建構子<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 初始化資料<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;LinkedList() {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;tail = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;size = 0;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 把資料放進去<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;void push(T data) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 如果裡面空空的<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(size==0) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head = new Node&lt;T&gt;; // 讓head變成新的Node<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head -&gt; num = data; // 把資料放進去<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head -&gt; next = NULL; // 指定head的next是null<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;size++; // 讓size++<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;tail = head;// 讓tail變成head<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return; // return 回去 避免進入下一行<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 要是不是空的話<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;tail -&gt; next = new Node&lt;T&gt;; // 先讓tail的下一個變成新的Node<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;tail = tail -&gt; next; // 把tail 移到下一層<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;tail -&gt; num = data;// 把資料放進去<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;tail -&gt; next = NULL; // tail的下一個指定為NULL<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;size++;// size增加<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return;// return 回去 可加可不加<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 單純的複製LinkedList<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 這邊是產生一個新的LinkedList 而不是把原本的return回去<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 因為如果是把原本的return回去，會導致資料會被互相引響<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;LinkedList copy() {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;LinkedList toReturn; // 準備回傳回去的資料<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node&lt;T&gt; * temp = head; // 指標 用來走訪整個LinkedList<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;while(temp!=NULL) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;toReturn.push(temp-&gt;num); // 透過方法一直去push資料<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp = temp -&gt; next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return toReturn; // return</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 透過 index 去取得資料<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;T getDataFromIndex(int k) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node&lt;T&gt; * temp = getFromIndex(k);<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return temp -&gt; num;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 透過index 移除資料 並且將資料回傳&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;T removeFromIndex(int k) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;Node&lt;T&gt; * temp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;if (k&gt;=size||k&lt;0) return NULL;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (k!=0)&nbsp;temp = getFromIndex(k-1);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else{<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(head==NULL) return NULL;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T n = head -&gt; num;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head = head -&gt; next;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; size--;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return n;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(temp==NULL) return NULL;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T n = temp -&gt; next -&gt; num;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp -&gt; next = temp -&gt; next -&gt; next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;size--;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return n;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 取得大小&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int getSize() {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return size;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;// 不公開的&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;private:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node&lt;T&gt; * head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node&lt;T&gt; * tail;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int size;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 這邊之所以放在private 是為了防止有人透過此方法破壞LinkedList&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 此方法單純就是將第i個Node回傳&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node&lt;T&gt; * getFromIndex(int i) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(i==0) return head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(i&gt;=size) return NULL;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node&lt;T&gt; * temp = head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(int j = 0 ; j &lt; i ; j++) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp = temp -&gt; next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return temp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n};<br />\r\n<br />\r\nint main(){<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; LinkedList&lt;int&gt; a;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;a.push(12);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;a.push(14);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;a.push(16);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;a.removeFromIndex(2); // 刪除第三個節點<br />\r\n}</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "92",
        "lang": "1"
    }
}
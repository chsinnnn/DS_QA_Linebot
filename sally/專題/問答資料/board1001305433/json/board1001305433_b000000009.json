{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:49:45",
        "@type": "post",
        "@filename": "b000000009.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001305433",
        "node": "000000009",
        "site": "1000110001",
        "pt": "2023-10-11 16:11:06",
        "poster": "11127245",
        "realname": "薛宏毓",
        "email": "a0975809594@gmail.com",
        "homepage": null,
        "subject": "119. 寫C++程式碼說明刪除鏈結串列linked list第3個節點。",
        "content": "<p>#include &lt;iostream&gt;<br />\r\nusing namespace std;</p>\r\n\r\n<p>struct Node{<br />\r\n&nbsp;&nbsp; &nbsp;int &nbsp; num;<br />\r\n&nbsp;&nbsp; &nbsp;Node *next;<br />\r\n};</p>\r\n\r\n<p>Node *deleteNode(int position, Node *head) { &nbsp; // check and delete node<br />\r\n&nbsp; &nbsp; if (head == NULL || position &lt; 1) { &nbsp; &nbsp; &nbsp; &nbsp;// is legal linklist and position<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; &quot;Invalid position or empty list&quot; &lt;&lt; endl;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return head;<br />\r\n&nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Node *temp = head;<br />\r\n&nbsp; &nbsp; if (position == 1) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // at first node<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; head = head-&gt;next;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; delete temp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return head;<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;else {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Node *prevPtr;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for (int i = 1 ; i != position ; i++ ) { &nbsp; // is Over linklist<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if (temp-&gt;next == NULL) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;Over linklist&quot; &lt;&lt; endl;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;prevPtr = temp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp &nbsp; &nbsp;= temp-&gt;next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if (temp-&gt;next == NULL) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// at last node<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;prevPtr-&gt;next = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;delete temp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;else { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // at other side node<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;prevPtr-&gt;next = temp-&gt;next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;delete temp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n} // deleteNode()</p>\r\n\r\n<p>Node *deleteAllNode(Node *head) { &nbsp; &nbsp; // delete linklist&nbsp;<br />\r\n&nbsp; &nbsp; if (head == NULL) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL;<br />\r\n&nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; deleteAllNode(head-&gt;next);<br />\r\n&nbsp; &nbsp; delete head;<br />\r\n&nbsp; &nbsp; return NULL;<br />\r\n} // deleteAllNode()</p>\r\n\r\n<p>void printLinkList(Node *head) { &nbsp; &nbsp; &nbsp;// print<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node *temp = head;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;while (temp != NULL) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;cout &lt;&lt; &quot;The ptr number is: &quot; &lt;&lt; temp-&gt;num &lt;&lt; endl;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp = temp-&gt;next;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;cout &lt;&lt; endl;<br />\r\n} // printLinkList()</p>\r\n\r\n<p>int main(void) {<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node *node1 = new Node;<br />\r\n&nbsp;&nbsp; &nbsp;Node *node2 = new Node;<br />\r\n&nbsp;&nbsp; &nbsp;Node *node3 = new Node;<br />\r\n&nbsp;&nbsp; &nbsp;Node *node4 = new Node;<br />\r\n&nbsp;&nbsp; &nbsp;Node *node5 = new Node;<br />\r\n&nbsp;&nbsp; &nbsp;node1-&gt;next = node2;<br />\r\n&nbsp;&nbsp; &nbsp;node1-&gt;num &nbsp;= 1;<br />\r\n&nbsp;&nbsp; &nbsp;node2-&gt;next = node3;<br />\r\n&nbsp;&nbsp; &nbsp;node2-&gt;num &nbsp;= 2;<br />\r\n&nbsp;&nbsp; &nbsp;node3-&gt;next = node4;<br />\r\n&nbsp;&nbsp; &nbsp;node3-&gt;num &nbsp;= 3;<br />\r\n&nbsp;&nbsp; &nbsp;node4-&gt;next = node5;<br />\r\n&nbsp;&nbsp; &nbsp;node4-&gt;num &nbsp;= 4;<br />\r\n&nbsp;&nbsp; &nbsp;node5-&gt;next = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;node5-&gt;num &nbsp;= 5;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node *head = node1;<br />\r\n&nbsp;&nbsp; &nbsp;printLinkList(head);<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;head = deleteNode(3, head); &nbsp; &nbsp; &nbsp; &nbsp;// Delete position 3<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;printLinkList(head);<br />\r\n&nbsp;&nbsp; &nbsp;deleteAllNode(head);<br />\r\n&nbsp;&nbsp; &nbsp;delete head;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />\r\n} // main()</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "28",
        "lang": "1"
    }
}
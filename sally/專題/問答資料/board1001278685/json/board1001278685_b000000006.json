{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-20 09:55:44",
        "@type": "post",
        "@filename": "b000000006.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001278685",
        "node": "000000006",
        "site": "1000110001",
        "pt": "2023-07-21 13:55:41",
        "poster": "06005636",
        "realname": "朱紘正",
        "email": "henry3446@gmail.com",
        "homepage": null,
        "subject": "搶答217",
        "content": "<p>217. 舉例解說快速排序quick sort是否穩定stable。</p>\r\n\r\n<p>穩定排序是指當有兩個元素的排序鍵（通常是數值）相等時，排序算法能保持它們在原有的相對順序。如果列表中有兩個相等的元素a和b，且在排序之前，a出現在b的前面，那麼在排序後，a仍然會在b的前面。</p>\r\n\r\n<p>快速排序是一種基於分治法的排序算法，其基本思想是選擇一個元素作為基準(pivot)，然後將列表中的元素分為兩個子列表，一個子列表中的所有元素小於等於pivot，另一個子列表中的所有元素大於pivot。然後，對這兩個子列表遞迴地應用相同的過程，直到所有子列表都只包含一個元素，此時列表就已經排序完成。由於快速排序是通過交換元素來實現的，它的排序過程中元素的相對位置可能會發生變化。因此，快速排序通常是一種不穩定的排序算法。假設我們有以下一個列表需要排序，並以括號內的數字表示它們的原始索引：</p>\r\n\r\n<p>[4(1), 2(2), 3(3), 4(4), 1(5)]使用快速排序，我們選擇pivot為第一個元素4。在第一次遞迴之後，</p>\r\n\r\n<p>列表可能會變成以下形式：[2(2), 3(3), 1(5), 4(1), 4(4)]現在注意，原本索引4和索引5的元素4的相對順序在排序後發生了改變。在穩定的排序算法中，這兩個4的相對順序會保持不變。因此，快速排序通常被視為一個不穩定的排序算法，這也是為什麼有時候需要使用穩定排序算法來確保特定順序的元素在排序後依然保持相對位置。</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "24",
        "lang": "1"
    }
}
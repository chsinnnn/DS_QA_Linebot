{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:50:08",
        "@type": "post",
        "@filename": "b000000015.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001305434",
        "node": "000000015",
        "site": "1000110001",
        "pt": "2023-10-25 09:24:18",
        "poster": "11127213",
        "realname": "凌鼎軒",
        "email": "benson920925@gmail.com",
        "homepage": null,
        "subject": "123. 寫C++程式碼說明如何複製一整個鏈結串列linked list到另一個變數。",
        "content": "<p># include &lt;stdio.h&gt;<br />\r\n# include &lt;stdlib.h&gt;</p>\r\n\r\n<p>typedef struct Node Node;</p>\r\n\r\n<p>struct Node {<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;int val;<br />\r\n&nbsp;&nbsp; &nbsp;struct Node* next;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n};</p>\r\n\r\n<p>Node* CreateNode( int value );<br />\r\nvoid AppendToTail( Node* list_head, Node* add );<br />\r\nvoid PrintList( Node* head );<br />\r\nNode* copyList( Node* head );<br />\r\nvoid FreeAll( Node* head );</p>\r\n\r\n<p>Node* CreateNode( int value ) &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// create and initialize the node<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node* create = ( Node* )calloc( 1, sizeof( Node ) );<br />\r\n&nbsp;&nbsp; &nbsp;create -&gt; next = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;create -&gt; val = value;<br />\r\n&nbsp;&nbsp; &nbsp;return create;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>\r\n\r\n<p>void AppendToTail( Node** list_head, Node* add ) &nbsp;{ &nbsp; &nbsp; &nbsp;// add nodes to the tail, using indirect pointer<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; Node** ptr = list_head;<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; while ( *ptr )<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; ptr = &amp;( ( *ptr ) -&gt; next );<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; *ptr = add;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>\r\n\r\n<p>void PrintList( Node* head ) &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// print the list<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;while ( head ) &nbsp;{<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;printf( &quot;%d\\n&quot;, head -&gt; val );<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head = head -&gt; next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>\r\n\r\n<p>Node* copyList( Node* head ) &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // copy whole linked list<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node* temp = NULL, *copy_head = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;while ( head ) &nbsp;{<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp = CreateNode( head -&gt; val );<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;AppendToTail( &amp;copy_head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head = head -&gt; next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;return copy_head;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>\r\n\r\n<p>void SetUpTestCase() &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// test case for copyList function<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node* temp = NULL, *head = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;printf( &quot;=============Origianl List=============\\n&quot; );<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;temp = CreateNode( 1 );<br />\r\n&nbsp;&nbsp; &nbsp;AppendToTail( &amp;head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;temp = CreateNode( 5 );<br />\r\n&nbsp;&nbsp; &nbsp;AppendToTail( &amp;head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;temp = CreateNode( 2 );<br />\r\n&nbsp;&nbsp; &nbsp;AppendToTail( &amp;head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;temp = CreateNode( 7 );<br />\r\n&nbsp;&nbsp; &nbsp;AppendToTail( &amp;head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;temp = CreateNode( 6 );<br />\r\n&nbsp;&nbsp; &nbsp;AppendToTail( &amp;head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;temp = CreateNode( 8 );<br />\r\n&nbsp;&nbsp; &nbsp;AppendToTail( &amp;head, temp );<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;PrintList( head );<br />\r\n&nbsp;&nbsp; &nbsp;printf( &quot;=============Copied List=============\\n&quot; );<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node* copy_list = copyList( head );<br />\r\n&nbsp;&nbsp; &nbsp;PrintList( copy_list );<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;FreeAll( copy_list );<br />\r\n&nbsp;&nbsp; &nbsp;FreeAll( head );<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>\r\n\r\n<p>void FreeAll( Node* head ) &nbsp;{<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Node* temp = NULL;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;while ( head ) &nbsp;{<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;temp = head;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;head = head -&gt; next;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;free( temp );<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>\r\n\r\n<p>int main() &nbsp;{ &nbsp; &nbsp; // invoke the test case function<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;SetUpTestCase();<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n}</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "14",
        "lang": "1"
    }
}
{
    "data": {
        "@version": "3.0",
        "@time": "2024-07-19 08:53:34",
        "@type": "post",
        "@filename": "b000000002.xml",
        "open_time": "0000-00-00",
        "close_time": "0000-00-00",
        "lang_name": "Big5",
        "board_id": "1001296418",
        "node": "000000002",
        "site": "1000110001",
        "pt": "2023-09-23 10:47:41",
        "poster": "11127137",
        "realname": "黃乙家",
        "email": "u810025@gmail.com",
        "homepage": "https://ja-errorpro.cf",
        "subject": "110",
        "content": "<p><span style=\"font-size:18px\"><strong>作業一靜態陣列和動態陣列有何差異？指出其優缺點。</strong></span></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">&nbsp;</td>\r\n\t\t\t<td style=\"text-align:center\">靜態陣列</td>\r\n\t\t\t<td style=\"text-align:center\">動態陣列(C-style)</td>\r\n\t\t\t<td style=\"text-align:center\">動態陣列(std::vector)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">大小</td>\r\n\t\t\t<td style=\"text-align:center\">編譯時期就已確定</td>\r\n\t\t\t<td style=\"text-align:center\">可在程式運行時更改大小</td>\r\n\t\t\t<td style=\"text-align:center\">可在程式運行時更改大小</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">記憶體分配</td>\r\n\t\t\t<td style=\"text-align:center\">連續</td>\r\n\t\t\t<td style=\"text-align:center\">可分配成連續</td>\r\n\t\t\t<td style=\"text-align:center\">連續</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">&nbsp;記憶體管理</td>\r\n\t\t\t<td style=\"text-align:center\">自動分配、釋放</td>\r\n\t\t\t<td style=\"text-align:center\">需手動分配、釋放</td>\r\n\t\t\t<td style=\"text-align:center\">\r\n\t\t\t<p>自動分配、釋放</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">元素存取</td>\r\n\t\t\t<td style=\"text-align:center\">最快</td>\r\n\t\t\t<td style=\"text-align:center\">稍快</td>\r\n\t\t\t<td style=\"text-align:center\">在極端情況下較慢</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">元素操作</td>\r\n\t\t\t<td style=\"text-align:center\">需自己寫</td>\r\n\t\t\t<td style=\"text-align:center\">需自己寫</td>\r\n\t\t\t<td style=\"text-align:center\">提供各種介面方便操作</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">安全性</td>\r\n\t\t\t<td style=\"text-align:center\">若有不當記憶體存取結果為未定義行為</td>\r\n\t\t\t<td style=\"text-align:center\">若有不當記憶體存取結果為未定義行為；如果使用完沒有釋放記憶體會造成memory leak</td>\r\n\t\t\t<td style=\"text-align:center\">使用at()存取元素因為有bounds checking將比使用operator[]較安全</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><span style=\"font-size:14px\">優缺點：</span></p>\r\n\r\n<p>靜態陣列簡單快速、不需要做額外的memory allocation增加開銷，適用於元素數量固定且已知大小的情況，但無法調整大小所以可能造成空間浪費。</p>\r\n\r\n<p>動態陣列適用於元素數量不確定的情況，可以一直新增資料而不需要在乎大小，且提供方便的member function來操作元素，但儘管實作上已經進行各種最佳化但還是有可能比靜態陣列還耗性能</p>\r\n\r\n<p>ref:&nbsp;https://en.cppreference.com/w/</p>",
        "attach": null,
        "rcount": null,
        "rank": null,
        "hit": "124",
        "lang": "1"
    }
}